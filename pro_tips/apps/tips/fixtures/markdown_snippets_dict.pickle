(dp0
VJava
p1
(lp2
(dp3
S'lang'
p4
VJava
p5
sS'body'
p6
(I0
S"Sometimes it is tempting to be lazy when catching exceptions and do\nsomething like this:\n\n    try {\n        someComplicatedIOFunction();        // may throw IOException \n        someComplicatedParsingFunction();   // may throw ParsingException \n        someComplicatedSecurityFunction();  // may throw SecurityException \n        // phew, made it all the way \n    } catch (Exception e) {                 // I'll just catch all exceptions \n        handleError();                      // with one generic handler!\n    }\n\nYou should not do this. In almost all cases it is inappropriate to\ncatch generic Exception or Throwable, preferably not Throwable,\nbecause it includes Error exceptions as well. It is very dangerous. It\nmeans that Exceptions you never expected (including RuntimeExceptions\nlike ClassCastException) end up getting caught in application-level\nerror handling. It obscures the failure handling properties of your\ncode. It means if someone adds a new type of Exception in the code\nyou're calling, the compiler won't help you realize you need to handle\nthat error differently. And in most cases you shouldn't be handling\ndifferent types of exception the same way, anyway.\n\nThere are rare exceptions to this rule: certain test code and\ntop-level code where you want to catch all kinds of errors (to prevent\nthem from showing up in a UI, or to keep a batch job running). In that\ncase you may catch generic Exception (or Throwable) and handle the\nerror appropriately. You should think very carefully before doing\nthis, though, and put in comments explaining why it is safe in this\nplace.\n\nAlternatives to catching generic Exception:\n\n*   Catch each exception separately as separate catch blocks after a\n    single try. This can be awkward but is still preferable to\n    catching all Exceptions. Beware repeating too much code in the\n    catch blocks.\n*   Refactor your code to have more fine-grained error handling, with\n    multiple try blocks. Split up the IO from the parsing, handle\n    errors separately in each case.\n*   Rethrow the exception. Many times you don't need to catch the\n    exception at this level anyway, just let the method throw it.\n\nRemember: exceptions are your friend! When the compiler complains\nyou're not catching an exception, don't scowl. Smile: the compiler\njust made it easier for you to catch runtime problems in your code.\n\n[source\n(google.com)](https://source.android.com/source/code-style.html)\n"
p7
tp8
sS'votes'
p9
V+9
p10
sS'title'
p11
VDon't Catch Generic Exception
p12
sa(dp13
S'lang'
p14
VJava
p15
sS'body'
p16
(I0
S'Braces do not go on their own line; they go on the same line as the\ncode before them. So:\n\n    class MyClass {\n        int func() {\n            if (something) {\n                // ...\n            } else if (somethingElse) {\n                // ...\n            } else {\n                // ...\n            }\n        }\n    }\n\nWe require braces around the statements for a conditional. Except, if\nthe entire conditional (the condition and the body) fit on one line,\nyou may (but are not obligated to) put it all on one line. That is,\nthis is legal:\n\n    if (condition) {\n        body(); \n    }\n\nand this is legal:\n\n    if (condition) body();\n\nbut this is still illegal:\n\n    if (condition)\n        body();  // bad!\n\n[source\n(google.com)](https://source.android.com/source/code-style.html)\n'
p17
tp18
sS'votes'
p19
V+6
p20
sS'title'
p21
VUse Standard Brace Style
p22
sa(dp23
S'lang'
p24
VJava
p25
sS'body'
p26
(I0
S'    computeAverage();               // NOT: compAvg();\n    ActionEvent event;              // NOT: ActionEvent e;\n    catch (Exception exception) {   // NOT: catch (Exception e) {\n\nThere are two types of words to consider. First are the common words\nlisted in a language dictionary. These must never be abbreviated.\n\nNever write:\n\n    cmd   instead of   command\n    comp  instead of   compute\n    cp    instead of   copy\n    e     instead of   exception\n    init  instead of   initialize\n    pt    instead of   point\n    etc.\n\nThen there are domain specific phrases that are more naturally known\nthrough their acronym or abbreviations. These phrases should be kept\nabbreviated.\n\nNever write:\n\n    HypertextMarkupLanguage  instead of   html\n    CentralProcessingUnit    instead of   cpu\n    PriceEarningRatio        instead of   pe\n'
p27
tp28
sS'votes'
p29
V+6
p30
sS'title'
p31
VAvoid abbreviations in names
p32
sa(dp33
S'lang'
p34
VJava
p35
sS'body'
p36
(I0
S"The concept of Java information hiding and encapsulation is violated\nby public variables. Use private variables and access functions\ninstead. One exception to this rule is when the class is essentially a\ndata structure, with no behavior (equivalent to a C++ struct). In this\ncase it is appropriate to make the class' instance variables public\n"
p37
tp38
sS'votes'
p39
V+3
p40
sS'title'
p41
VClass variables should never be declared public
p42
sa(dp43
S'lang'
p44
VJava
p45
sS'body'
p46
(I0
VSo very often one will see code littered with several constructors and\u000aat the bottom you see a few lonely lines.\u000a\u000a    public Constructor () {\u000a\u000a    }\u000a\u000aYou don't need to declare it especially if your class will be\u000aperforming some task that is already being handled by other\u000aconstructors etc. Save yourself a few lines and skip it.\u000a\u000aThe Java Language Specification states that:\u000a\u000a> If a class contains no constructor declarations, then a default\u000a> constructor that takes no parameters and no `throws` clause is\u000a> automatically provided:\u000a>\u000a> *   If the class being declared is the primordial class Object, then\u000a>     the default constructor has an empty body.\u000a> *   Otherwise, the default constructor takes no parameters and\u000a>     simply invokes the superclass constructor with no arguments.\u000a>\u000a> In a class type:\u000a>\u000a> *   if the class is declared `public`, then the default constructor\u000a>     is implicitly given the access modifier `public`.\u000a> *   if the class is declared `protected`, then the default\u000a>     constructor is implicitly given the access modifier `protected`.\u000a> *   if the class is declared `private`, then the default constructor\u000a>     is implicitly given the access modifier `private`.\u000a> *   otherwise, the default constructor has the default access\u000a>     implied by no access modifier.\u000a> *   In an `enum` type, the default constructor is implicitly\u000a>     `private`.\u000a\u000aA default constructor will always be created and you only really need\u000aone if for some reason you want to change its visibility. However, if\u000ayou define at least one constructor, the default constructor is not\u000agenerated.\u000a\u000a**References**\u000a\u000a[source (Java Language Specification,\u000ap195)](http://books.google.com.jm/books?id=Ww1B9O_yVGsC&lpg=PA195&ots=Se7IboN9jC&dq=If%20a%20class%20contains%20no%20constructor%20declarations%2C%20then%20a%20default%20constructor%20that%20takes%20no%20parameters%20is%20automatically%20provided%3A&pg=PA195#v=onepage&q&f=false)\u000a\u000a[Java Language Specification\u000a(oracle.com)](http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.8.9)\u000a
p47
tp48
sS'votes'
p49
V+2
p50
sS'title'
p51
VYou don't need to declare a default constructor
p52
sa(dp53
S'lang'
p54
VJava
p55
sS'body'
p56
(I0
S'The proper way to define a constant field in java is the following:\n\n    public static final String CONSTANT_NAME = "foo";\n\nwhere the important parts are that this field is static and final. By\nconvention it has upper-case letters and underscore as word separator.\n\nIt is considered a bad practice to use a single class for constants,\nas with the growing number of constants in the code the class becomes\nless maintainable and the harder to use. The good practice is to\nalways define constant fields in the class where they belong.\n'
p57
tp58
sS'votes'
p59
V+2
p60
sS'title'
p61
VConstant fields
p62
sa(dp63
S'lang'
p64
VJava
p65
sS'body'
p66
(I0
S"Finalizers are a way to have a chunk of code executed when an object\nis garbage collected.\n\n**Pros**: can be handy for doing cleanup, particularly of external\nresources.\n\n**Cons**: there are no guarantees as to when a finalizer will be\ncalled, or even that it will be called at all.\n\nDecision: we don't use finalizers. In most cases, you can do what you\nneed from a finalizer with good exception handling. If you absolutely\nneed it, define a `close()` method (or the like) and document exactly\nwhen that method needs to be called. See InputStream for an example.\nIn this case it is appropriate but not required to print a short log\nmessage from the finalizer, as long as it is not expected to flood the\nlogs.\n"
p67
tp68
sS'votes'
p69
V+1
p70
sS'title'
p71
VDon't Use Finalizers
p72
sa(dp73
S'lang'
p74
VJava
p75
sS'body'
p76
(I0
S'Enums are classes and should follow the conventions for classes.\nInstances of an enum are constants and should follow the conventions\nfor constants. So\n\n    enum Fruit {APPLE,ORANGE,BANANA,PEAR};\n\nThere is no reason for writing FruitEnum any more than FruitClass. You\nare just wasting four (or five) characters that add no information.\n\n[source\n(stackoverflow.com)](http://stackoverflow.com/a/3069863/2326828)\n'
p77
tp78
sS'votes'
p79
V+1
p80
sS'title'
p81
VNaming Enums
p82
sa(dp83
S'lang'
p84
VJava
p85
sS'body'
p86
(I0
S'Class attributes should always be accessed through accessors and\nmutators (getters and setters). Accessors and mutators are methods\nused to return and set the attribute value. These methods typically\nbegin with `get` or `set`, followed by the attribute name. As with\nother methods, the first letter of the method name should be in\nlowercase. Note: Boolean accessors typically begin with `is` i.e.\n`isFixed()`, and return a Boolean value.\n\nExample:\n\nAttribute(s):\n\n       int useCounter;\n\nGetter:\n\n       int getUseCounter(){\n          return useCounter;\n       }\n\nSetter(s):\n\n       void setUseCounter(int count){\n          useCounter = count;\n       }\n\n       void incrementUseCounter() {\n          setUseCounter(getUseCounter()+1);\n       }\n\n       void decrementUseCounter() {\n          setUseCounter(getUseCounter()-1);\n       }\n\nBe safe and initialize all local variables at creation and all class\nattributes in the constructor(s)!\n\n[source\n(iwombat.com)](http://www.iwombat.com/standards/JavaStyleGuide.html#optimization%20vs%20abstraction)\n'
p87
tp88
sS'votes'
p89
V+1
p90
sS'title'
p91
VClass Attributes
p92
sa(dp93
S'lang'
p94
VJava
p95
sS'body'
p96
(I0
S"Java's object-cloning mechanism can allow an attacker to manufacture\nnew instances of classes you define, without executing any of your\nconstructors. If your class is not cloneable, the attacker can define\na subclass of your class, and make the subclass implement\n`java.lang.Cloneable`. This allows the attacker to make new instances\nof your class. The new instances are made by copying the memory images\nof existing objects; although this is sometimes an acceptable way to\nmake a new object, it often is not.\n\nRather than worry about this, you're better off making your objects\nuncloneable. You can do this by defining the following method in each\nof your classes:\n\n    public final void clone() throws java.lang.CloneNotSupportedException {\n         throw new java.lang.CloneNotSupportedException();\n    }\n\nIf you want your class to be cloneable, and you've considered the\nconsequences of that choice, then you can still protect yourself. If\nyou're defining a clone method yourself, make it final. If you're\nrelying on a nonfinal clone method in one of your superclasses, then\ndefine this method:\n\n    public final void clone() throws java.lang.CloneNotSupportedException {\n         super.clone();\n    }\n\nThis prevents an attacker from redefining your clone method.\n\n[source\n(securingjava.com)](http://www.securingjava.com/chapter-seven/chapter-seven-1.html)\n"
p97
tp98
sS'votes'
p99
V+1
p100
sS'title'
p101
VMake Your Classes Uncloneable
p102
sa(dp103
S'lang'
p104
VJava
p105
sS'body'
p106
(I0
S'When you want to use class Bar from package foo,there are two possible\nways to import it:\n\n`import foo.*;`\n\n**Pros**: Potentially reduces the number of import statements.\n\n`import foo.Bar;`\n\n**Pros**: Makes it obvious what classes are actually used. Makes code\nmore readable for maintainers.\n\nDecision: Use the latter for importing all Android code. An explicit\nexception is made for java standard libraries (`java.util.*`,\n`java.io.*`, etc.) and unit test code (`junit.framework.*`)\n'
p107
tp108
sS'votes'
p109
V0
p110
sS'title'
p111
VFully Qualify Imports
p112
sa(dp113
S'lang'
p114
VJava
p115
sS'body'
p116
(I0
S'When designing applications there is sometimes a choice between\nrunning several processes, i.e. JVM instances versus running several\nthreads or thread groups within a single process, i.e. JVM instance.\n**If possible, it is more effective to use as few JVM instances as\npossible per physical machine**.\n\n[source\n(oracle.com)](http://docs.oracle.com/cd/E13188_01/jrockit/docs142/devapp/codeprac.html#998552)\n'
p117
tp118
sS'votes'
p119
V0
p120
sS'title'
p121
VMinimize the Number of Java Processes
p122
sa(dp123
S'lang'
p124
VJava
p125
sS'body'
p126
(I0
S"Don't call `java.lang.System.gc()`. This method behaves differently\nwith BEA JRockit JVM than with other JVMs. Instead of doing a complete\ngarbage collection, as with the Sun JVM and others, when called by an\napplication running with BEA JRockit JVM, `System.gc()` behaves\ndepending upon the garbage collector already in use:\n\n*   If you're using a generational copy collector, `System.gc()` does\n    a collection in their nursery.\n*   For all other collectors, it does a collection only if one is\n    needed. In other words, it does nothing special on the call.\n\n**Note:** If you must call `System.gc()`, you can override BEA JRockit\nJVM's behavior by using the command line option `-XXfullsystemgc`.\n\nThe BEA JRockit JVM garbage collector will generally do a much better\njob of deciding when to do garbage collection than will `System.gc()`.\nIf you are having problems with memory usage, pause times for garbage\ncollection, and so on, you are better off configuring the BEA JRockit\nJVM memory management system appropriately. [See Tuning BEA JRockit\nJVM](http://docs.oracle.com/cd/E13188_01/jrockit/docs142/tuning/config.html)\nin the _[Tuning BEA JRockit 1.4.2\nJVM](http://docs.oracle.com/cd/E13188_01/jrockit/docs142/tuning/index.html)_.\n\n[source\n(oracle.com)](http://docs.oracle.com/cd/E13188_01/jrockit/docs142/devapp/codeprac.html#998554)\n"
p127
tp128
sS'votes'
p129
V0
p130
sS'title'
p131
VAvoid Calling System.gc()
p132
sa(dp133
S'lang'
p134
VJava
p135
sS'body'
p136
(I0
S'Name hiding refers to the practice of naming a local variable,\nargument, or field the same (or similar) as that of another of greater\nscope.\n\nFor example, if you have a class attribute called `firstName` do not\ncreate a local variable called `firstName` or anything close to it,\nsuch as `firstNames` or `fName`. Try to avoid this, it makes you code\ndifficult to understand and prone to bugs because other developers\nwill misread your intentions and create difficult to detect errors.\n'
p137
tp138
sS'votes'
p139
V0
p140
sS'title'
p141
VDon't "Hide" Names
p142
sa(dp143
S'lang'
p144
VJava
p145
sS'body'
p146
(I0
S'In general it is not a good idea to remove methods from a class (or\nclasses from a package), instead label old methods with the\n`@deprecated` tag. With liberal use of this tag you are less likely to\nbreak builds and code in use elsewhere. However, the compiler will\nproduce warnings letting other developers know that they are using a\ndeprecated method (or class).\n\n**Good**:\n\n    /**\n    * Method to check if proscribed operation is allowed for this object.\n    * This method is needed to provided some level of security on operations.\n    *\n    * @param Operation must be an operation that has registered itself with the object\n    * @return boolean true if the operation is allowed, false otherwise.\n    * @exception UnknownOperation exception is thrown when an operation that has not\n    * registered with the object is passed as a parameter.\n    * @deprecated No longer used, SecurityAccessor class in com.iwombat.security \n    * replaces functionality\n    * @see com.iwombat.security\n    */\n    public boolean operationIsAllowed(Operation action)\n    throws UnknownOperation\n    {\n\n    }\n\n**Bad**:\n\n    /**\n    * operation check takes an operation and returns true or false\n    * no longer needed use SecurityAccessor\n    */\n    public boolean operationIsAllowed(Operation action)\n    throws UnknownOperation\n    {\n\n    }\n'
p147
tp148
sS'votes'
p149
V0
p150
sS'title'
p151
VUse the @deprecated Tag
p152
sa(dp153
S'lang'
p154
VJava
p155
sS'body'
p156
(I0
S"Use `for` loops only when a variable runs from somewhere to somewhere\nwith some constant increment/decrement:\n\n    for (int i = 0; i < a.length; i++)\n       System.out.println(a[i]);\n\nDo not use the for loop for weird constructs such as\n\n    for (a = a / 2; count < ITERATIONS; System.out.println(xnew))\n       // Don't\n\nMake such a loop into a while loop. That way, the sequence of\ninstructions is much clearer.\n\n    a = a / 2;\n    while (count < ITERATIONS) // OK\n    {  . . .\n       System.out.println(xnew);\n    }\n\n[sorce (horstmann.com)](http://horstmann.com/bigj/style.html)\n"
p157
tp158
sS'votes'
p159
V0
p160
sS'title'
p161
VThe for Statement
p162
sa(dp163
S'lang'
p164
VJava
p165
sS'body'
p166
(I0
S'For a good design where you minimize the coupling between classes, the\ngeneral rule of thumb is to be as restrictive as possible when setting\nthe visibility of a member function. If a member function does not\nhave to be public, then make it protected, and if it does not have to\nbe protected, then make it private.\n\n**public**\n\nA public member function can be invoked by any other member function\nin any other object or class.\n\n**public - Proper usage**\n\nWhen the member function must be accessible by objects and classes\noutside of the class hierarchy in which the member function is\ndefined.\n\n**protected**\n\nA protected member function can be invoked by any member function in\nthe class in which it is defined or any subclasses of that class.\n\n**protected - Proper usage**\n\nWhen the member function provides behavior that is needed internally\nwithin the class hierarchy but not externally.\n\n**private**\n\nA private member function can only be invoked by other member\nfunctions in the class in which it is defined, but not in the\nsubclasses.\n\n**private - Proper usage**\n\nWhen the member function provides behavior that is specific to the\nclass. Private member functions are often the result of refactoring,\nalso known as reorganizing, the behavior of other member functions\nwithin the class to encapsulate one specific behavior.\n'
p167
tp168
sS'votes'
p169
V0
p170
sS'title'
p171
VMember function visibility
p172
sa(dp173
S'lang'
p174
VJava
p175
sS'body'
p176
(I0
S'Every class, method, and variable that is not private provides a\npotential entry point for an attacker. By default, everything should\nbe private. Make something non-private only if there is a good reason,\nand document that reason.\n\n[source\n(securingjava.com)](http://www.securingjava.com/chapter-seven/chapter-seven-1.html)\n'
p177
tp178
sS'votes'
p179
V0
p180
sS'title'
p181
VLimit Access to Your Classes, Methods, and Variables
p182
sa(dp183
S'lang'
p184
VJava
p185
sS'body'
p186
(I0
S'Be careful when using `java.lang.Thread.setPriority`. Depending on\nthread priorities might lead on unwanted or unexpected results since\nthe scheduling algorithm might choose to starve lower priority threads\nof CPU time and never execute them. Furthermore the result might\ndiffer between operating systems and JVMs.\n\nThe Java API specification states that "Every thread has a priority.\nThreads with higher priority are executed in preference to threads\nwith lower priority."\n\nThe priority set by the `setPriority()` method is a parameter that\nmight be used in the thread-scheduling algorithm, which shares CPU\nexecution time between executing threads. This algorithm might be\ncontrolled either by the JVM or by the operating system. It is\nimportant to be aware of the fact that this algorithm normally differs\nbetween operating systems and that the algorithm might change between\nreleases of both the operating system and the JVM. For BEA JRockit JVM\nnative threads, the algorithm is implemented by the operating system.\n\n[source\n(oracle.com)](http://docs.oracle.com/cd/E13188_01/jrockit/docs142/devapp/codeprac.html#998533)\n'
p187
tp188
sS'votes'
p189
V0
p190
sS'title'
p191
VDon't Depend on Thread Priorities
p192
sa(dp193
S'lang'
p194
VJava
p195
sS'body'
p196
(I0
S'_"Prefer composition over inheritance as it is more malleable / easy\nto modify later, but do not use a compose-always approach."_\n\nAdditionally you get more flexibility to change your specifications\nwithout debugging everything than inherited from your object.\n\nhttp://en.wikipedia.org/wiki/Liskov\\_substitution\\_principle\n\nhttp://stackoverflow.com/questions/49002/prefer-composition-over-inheritance\n'
p197
tp198
sS'votes'
p199
V0
p200
sS'title'
p201
VPrefer Composition to Inheritance
p202
sasVScala
p203
(lp204
(dp205
S'lang'
p206
VScala
p207
sS'body'
p208
(I0
S"For simple type parameters, a single upper-case letter (from the\nEnglish alphabet) should be used, starting with A (this is different\nthan the Java convention of starting with T). For example:\n\n    class List[A] {\n      def map[B](f: A => B): List[B] = ...\n    }\n\nIf the type parameter has a more specific meaning, a descriptive name\nshould be used, following the class naming conventions (as opposed to\nan all-uppercase style):\n\n    // Right\n    class Map[Key, Value] {\n      def get(key: Key): Value\n      def put(key: Key, value: Value): Unit\n    }\n    // Wrong; don't use all-caps\n    class Map[KEY, VALUE] {\n      def get(key: KEY): VALUE\n      def put(key: KEY, value: VALUE): Unit\n    }\n\nIf the scope of the type parameter is small enough, a mnemonic can be\nused in place of a longer, descriptive name:\n\n    class Map[K, V] {\n      def get(key: K): V\n      def put(key: K, value: V): Unit\n    }\n\n[source\n(scala-lang.org)](http://docs.scala-lang.org/style/naming-conventions.html)\n"
p209
tp210
sS'votes'
p211
V+2
p212
sS'title'
p213
VType Parameters (generics)
p214
sa(dp215
S'lang'
p216
VScala
p217
sS'body'
p218
(I0
S'There are certain situations where it is useful to create a short\n`if/else` expression for nested use within a larger expression. In\nJava, this sort of case would traditionally be handled by the ternary\noperator (`?/:`), a syntactic device which Scala lacks. In these\nsituations (and really any time you have a extremely brief `if/else`\nexpression) it is permissible to place the \xe2\x80\x9cthen\xe2\x80\x9d and \xe2\x80\x9celse\xe2\x80\x9d\nbranches on the same line as the if and else keywords:\n\n    val res = if (foo) bar else baz\n\nThe key here is that readability is not hindered by moving both\nbranches inline with the `if/else`. Note that this style should never\nbe used with imperative if expressions nor should curly braces be\nemployed.\n\n[source\n(scala-lang.org)](http://docs.scala-lang.org/style/control-structures.html#trivial_conditionals)\n'
p219
tp220
sS'votes'
p221
V+1
p222
sS'title'
p223
VTrivial Conditionals
p224
sasVPython
p225
(lp226
(dp227
S'lang'
p228
VPython
p229
sS'body'
p230
(I0
S"**do this:**\n\n    if x:             \n        pass\n\n**not this:**\n\n    if x == True:\n        pass\n\nIt's elegant and efficient to take advantage of the intrinsic truth\nvalues (or Boolean values) of Python objects.\n\n[source\n(python.net)](http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#testing-for-truth-values)\n"
p231
tp232
sS'votes'
p233
V+9
p234
sS'title'
p235
VTesting for Truth Values
p236
sa(dp237
S'lang'
p238
VPython
p239
sS'body'
p240
(I0
S"Avoid extraneous whitespace in the following situations:\n\n*   Immediately inside parentheses, brackets or braces.\n\n        Yes: spam(ham[1], {eggs: 2})\n        No:  spam( ham[ 1 ], { eggs: 2 } )\n*   Immediately before a comma, semicolon, or colon:\n\n        Yes: if x == 4: print x, y; x, y = y, x\n        No:  if x == 4 : print x , y ; x , y = y , x\n*   Immediately before the open parenthesis that starts the argument\n    list of a function call:\n\n        Yes: spam(1)\n        No:  spam (1)\n*   Immediately before the open parenthesis that starts an indexing or\n    slicing:\n\n        Yes: dict['key'] = list[index]\n        No:  dict ['key'] = list [index]\n*   More than one space around an assignment (or other) operator to\n    align it with another.\n\n        #Yes:\n\n        x = 1\n        y = 2\n        long_variable = 3\n\n        #No:\n\n        x             = 1\n        y             = 2\n        long_variable = 3\n\n[source\n(python.org)](http://legacy.python.org/dev/peps/pep-0008/#pet-peeves)\n"
p241
tp242
sS'votes'
p243
V+5
p244
sS'title'
p245
VAvoid extraneous white space
p246
sa(dp247
S'lang'
p248
VPython
p249
sS'body'
p250
(I0
S'Limit all lines to a maximum of 79 characters.\n\nFor flowing long blocks of text with fewer structural restrictions\n(docstrings or comments), the line length should be limited to 72\ncharacters.\n\nLimiting the required editor window width makes it possible to have\nseveral files open side-by-side, and works well when using code review\ntools that present the two versions in adjacent columns.\n\nThe default wrapping in most tools disrupts the visual structure of\nthe code, making it more difficult to understand. The limits are\nchosen to avoid wrapping in editors with the window width set to 80,\neven if the tool places a marker glyph in the final column when\nwrapping lines. Some web based tools may not offer dynamic line\nwrapping at all.\n\nSome teams strongly prefer a longer line length. For code maintained\nexclusively or primarily by a team that can reach agreement on this\nissue, it is okay to increase the nominal line length from 80 to 100\ncharacters (effectively increasing the maximum length to 99\ncharacters), provided that comments and docstrings are still wrapped\nat 72 characters.\n\nThe Python standard library is conservative and requires limiting\nlines to 79 characters (and docstrings/comments to 72).\n\nThe preferred way of wrapping long lines is by using Python\'s implied\nline continuation inside parentheses, brackets and braces. Long lines\ncan be broken over multiple lines by wrapping expressions in\nparentheses. These should be used in preference to using a backslash\nfor line continuation.\n\nBackslashes may still be appropriate at times. For example, long,\nmultiple with-statements cannot use implicit continuation, so\nbackslashes are acceptable:\n\n    with open(\'/path/to/some/file/you/want/to/read\') as file_1, \\\n            open(\'/path/to/some/file/being/written\', \'w\') as file_2:\n        file_2.write(file_1.read())\n\nAnother such case is with `assert` statements.\n\nMake sure to indent the continued line appropriately. The preferred\nplace to break around a binary operator is after the operator, not\nbefore it. Some examples:\n\n    class Rectangle(Blob):\n\n        def __init__(self, width, height,\n                     color=\'black\', emphasis=None, highlight=0):\n            if (width == 0 and height == 0 and\n                    color == \'red\' and emphasis == \'strong\' or\n                    highlight > 100):\n                raise ValueError("sorry, you lose")\n            if width == 0 and height == 0 and (color == \'red\' or\n                                               emphasis is None):\n                raise ValueError("I don\'t think so -- values are %s, %s" %\n                                 (width, height))\n            Blob.__init__(self, width, height,\n                          color, emphasis, highlight)\n\n[source\n(python.org)](http://legacy.python.org/dev/peps/pep-0008/#maximum-line-length)\n'
p251
tp252
sS'votes'
p253
V+5
p254
sS'title'
p255
VMaximum line length
p256
sa(dp257
S'lang'
p258
VPython
p259
sS'body'
p260
(I0
S"If you need to assign something but will not need that variable, use\n\\_\\_:\n\n    filename = 'foobar.txt'\n    basename, __, ext = filename.rpartition('.')\n\n**Note**\n\nMany Python style guides recommend the use of a single underscore\n\xe2\x80\x9c`_`\xe2\x80\x9d for throwaway variables rather than the double underscore\n\xe2\x80\x9c`__`\xe2\x80\x9d recommended here. The issue is that \xe2\x80\x9c\\_\xe2\x80\x9d is commonly\nused as an alias for the\n[gettext()](http://docs.python.org/2/library/gettext.html) function,\nand is also used at the interactive prompt to hold the value of the\nlast operation. Using a double underscore instead is just as clear and\nalmost as convenient, and eliminates the risk of accidentally\ninterfering with either of these other use cases.\n\n[source\n(docs.python-guide.org)](http://docs.python-guide.org/en/latest/writing/style/#create-an-ignored-variable)\n"
p261
tp262
sS'votes'
p263
V+4
p264
sS'title'
p265
VCreate an ignored variable
p266
sa(dp267
S'lang'
p268
VPython
p269
sS'body'
p270
(I0
S'Explicit is better than implicit!\n\n**do this:**\n\n    if len(items) != 0:\n        pass\n\n**not this:**\n\n    if items:         \n        pass\n'
p271
tp272
sS'votes'
p273
V+4
p274
sS'title'
p275
VTesting a list
p276
sa(dp277
S'lang'
p278
VPython
p279
sS'body'
p280
(I0
S'Names, in a class, with a leading underscore are simply to indicate to\nother programmers that the attribute or method is intended to be\nprivate.  However, nothing special is done with the name itself.\n\nTo quote\n[PEP-8](http://legacy.python.org/dev/peps/pep-0008/#descriptive-naming-styles):\n\n> \\_single\\_leading\\_underscore: weak "internal use" indicator. E.g.\n> `from M import *` does not import objects whose name starts with an\n> underscore.\n\n[source (stackoverflow.com)](http://stackoverflow.com/a/1301369)\n'
p281
tp282
sS'votes'
p283
V+3
p284
sS'title'
p285
VSingle Underscore Before an Object Name
p286
sa(dp287
S'lang'
p288
VPython
p289
sS'body'
p290
(I0
S'Class names should normally use the **CapWords** convention.\n\nThe naming convention for functions may be used instead in cases where\nthe interface is documented and used primarily as a callable.\n\nNote that there is a separate convention for builtin names: most\nbuiltin names are single words (or two words run together), with the\nCapWords convention used only for exception names and builtin\nconstants.\n\n[source\n(python.org)](http://legacy.python.org/dev/peps/pep-0008/#class-names)\n'
p291
tp292
sS'votes'
p293
V+3
p294
sS'title'
p295
VClass Names
p296
sa(dp297
S'lang'
p298
VPython
p299
sS'body'
p300
(I0
S"Also known as [PEP 20](http://legacy.python.org/dev/peps/pep-0020/),\nthe guiding principles for Python\xe2\x80\x99s design.\n\n    >>> import this\n    The Zen of Python, by Tim Peters\n\n    Beautiful is better than ugly.\n    Explicit is better than implicit.\n    Simple is better than complex.\n    Complex is better than complicated.\n    Flat is better than nested.\n    Sparse is better than dense.\n    Readability counts.\n    Special cases aren't special enough to break the rules.\n    Although practicality beats purity.\n    Errors should never pass silently.\n    Unless explicitly silenced.\n    In the face of ambiguity, refuse the temptation to guess.\n    There should be one-- and preferably only one --obvious way to do it.\n    Although that way may not be obvious at first unless you're Dutch.\n    Now is better than never.\n    Although never is often better than *right* now.\n    If the implementation is hard to explain, it's a bad idea.\n    If the implementation is easy to explain, it may be a good idea.\n    Namespaces are one honking great idea -- let's do more of those!\n\n[This Stack Overflow\nquestion](http://stackoverflow.com/questions/228181/the-zen-of-python)\nand [these slides from a Python user\ngroup](http://artifex.org/~hblanks/talks/2011/pep20_by_example.pdf)\nare good examples of good Python style.\n"
p301
tp302
sS'votes'
p303
V+3
p304
sS'title'
p305
VPython's Design (PEP 20)
p306
sa(dp307
S'lang'
p308
VPython
p309
sS'body'
p310
(I0
S'From [the Python\ndocs](http://docs.python.org/tutorial/classes.html#private-variables-and-class-local-references):\n\n> Any identifier of the form `__spam` (at least two leading\n> underscores, at most one trailing underscore) is textually replaced\n> with `_classname__spam`, where `classname` is the current class name\n> with leading underscore(s) stripped. This mangling is done without\n> regard to the syntactic position of the identifier, so it can be\n> used to define class-private instance and class variables, methods,\n> variables stored in globals, and even variables stored in instances.\n> private to this class on instances of other classes.\n\nAnd a warning from the same page:\n\n> Name mangling is intended to give classes an easy way to define\n> \xe2\x80\x9cprivate\xe2\x80\x9d instance variables and methods, without having to\n> worry about instance variables defined by derived classes, or\n> mucking with instance variables by code outside the class. Note that\n> the mangling rules are designed mostly to avoid accidents; it still\n> is possible for a determined soul to access or modify a variable\n> that is considered private.\n\n## Example ##\n\n    >>> class MyClass():\n    ...     def __init__(self):\n    ...             self.__superprivate = "Hello"\n    ...             self._semiprivate = ", world!"\n    ...\n    >>> mc = MyClass()\n    >>> print mc.__superprivate\n    Traceback (most recent call last):\n      File "<stdin>", line 1, in <module>\n    AttributeError: myClass instance has no attribute \'__superprivate\'\n    >>> print mc._semiprivate\n    , world!\n    >>> print mc.__dict__\n    {\'_MyClass__superprivate\': \'Hello\', \'_semiprivate\': \', world!\'}\n\n[source (stackoverflow.com)](http://stackoverflow.com/a/1301369)\n'
p311
tp312
sS'votes'
p313
V+2
p314
sS'title'
p315
VDouble underscore before an object name
p316
sa(dp317
S'lang'
p318
VPython
p319
sS'body'
p320
(I0
S"Use 4 spaces per indentation level.\n\nContinuation lines should align wrapped elements either vertically\nusing Python's implicit line joining inside parentheses, brackets and\nbraces, or using a hanging indent. When using a hanging indent the\nfollowing considerations should be applied; there should be no\narguments on the first line and further indentation should be used to\nclearly distinguish itself as a continuation line.\n\n**Yes:**\n\n    # Aligned with opening delimiter\n    foo = long_function_name(var_one, var_two,\n                             var_three, var_four)\n\n    # More indentation included to distinguish this from the rest.\n    def long_function_name(\n            var_one, var_two, var_three,\n            var_four):\n        print(var_one)\n\n**No:**\n\n    # Arguments on first line forbidden when not using vertical alignment\n    foo = long_function_name(var_one, var_two,\n        var_three, var_four)\n\n    # Further indentation required as indentation is not distinguishable\n    def long_function_name(\n        var_one, var_two, var_three,\n        var_four):\n        print(var_one)\n\n**Optional:**\n\n    # Extra indentation is not necessary.\n    foo = long_function_name(\n      var_one, var_two,\n      var_three, var_four)\n\nThe closing brace/bracket/parenthesis on multi-line constructs may\neither line up under the first non-whitespace character of the last\nline of list, as in:\n\n    my_list = [\n        1, 2, 3,\n        4, 5, 6,\n        ]\n    result = some_function_that_takes_arguments(\n        'a', 'b', 'c',\n        'd', 'e', 'f',\n        )\n\nor it may be lined up under the first character of the line that\nstarts the multi-line construct, as in:\n\n    my_list = [\n        1, 2, 3,\n        4, 5, 6,\n    ]\n    result = some_function_that_takes_arguments(\n        'a', 'b', 'c',\n        'd', 'e', 'f',\n    )\n\n[source\n(python.org)](http://legacy.python.org/dev/peps/pep-0008/#indentation)\n"
p321
tp322
sS'votes'
p323
V+2
p324
sS'title'
p325
VIndentation
p326
sa(dp327
S'lang'
p328
VPython
p329
sS'body'
p330
(I0
S'Use **single-quotes** for string literals, e.g. `\'my-identifier\'`, but\nuse **double-quotes** for strings that are likely to contain\nsingle-quote characters as part of the string itself (such as error\nmessages, or any strings containing natural language), e.g. `"You\'ve\ngot an error!"`.\n\nSingle-quotes are easier to read and to type, but if a string contains\nsingle-quote characters then double-quotes are better than escaping\nthe single-quote characters or wrapping the string in double\nsingle-quotes.\n\nUse **triple single-quotes** for docstrings.\n'
p331
tp332
sS'votes'
p333
V+2
p334
sS'title'
p335
VSingle vs double vs triple quotes
p336
sa(dp337
S'lang'
p338
VPython
p339
sS'body'
p340
(I0
S"always import the specific object you need. Don't:\n\n    from my_module import *\n\nDo:\n\n    from my_module import ClassName\n\nif it makes your lines too long, you can add parentheses:\n\n    from my_module import (ClassLongName1,\n                           ClassLongName2)\n"
p341
tp342
sS'votes'
p343
V+2
p344
sS'title'
p345
Vimport only names you use
p346
sa(dp347
S'lang'
p348
VPython
p349
sS'body'
p350
(I0
S'When you have a list with one object per line, add a trailing comma\nafter the final element.\n\nDo:\n\n    list = [\n        "item one",\n        "item two",\n        "item three",\n        ]\n\nDon\'t do:\n\n    list = [\n        "item one",\n        "item two",\n        "item three"\n        ]\n\nThis allows you to add items to the list without modifying the\nexisting lines, and cleans up your diffs.\n'
p351
tp352
sS'votes'
p353
V+2
p354
sS'title'
p355
VUse trailing commas
p356
sa(dp357
S'lang'
p358
VPython
p359
sS'body'
p360
(I0
S'Programmers familiar with languages like C/C++/Pascal often find\npuzzling the lack of a `switch`/`case` statement in Python, like the\nfollowing one (C):\n\n    switch(x) {\n    case 1: y = \'a\'; break;\n    case 2: do_something(); break;\n    default: panic();\n    }\n\nThe most straightforward way to do this in Python would be to use a\nsequence of nested `if`:\n\n    if x == 1:\n        y = \'a\'\n    elif x == 2:\n        do_something()\n    else:\n        panic()\n\nA better way to do this in Python is to use a dictionary. Here is an\nexample:\n\n    city = raw_input("Enter the city you want to visit: ")\n    known_cities = {"Paris": "France",\n                    "Rome": "Italy",\n                    "Madrid": "Spain"}\n    try:\n        print "The city you chose is in ", known_cities[city]\n    except KeyError:\n        print "I\'ve never heard of ", city\n\nIf the actions you must perform are quite different depending on the\nvalue of `x`, then the value associated with each key can be a\nfunction:\n\n    def connect_to_db():\n        print "I am going to connect to the DB"\n\n    def disconnect_from_db():\n        print "I am going to disconnect myself from the DB"\n\n    available_actions = {"connect": connect_to_db,\n                         "disconnect": disconnect_from_db}\n    action = raw_input("What should I do now? ")\n    try:\n        available_actions[action]()\n    except KeyError:\n        print "Unrecognized command ", action\n\nA clever way to avoid the explicit catch to `KeyError` is to query the\ndictionary using `get` and passing a null function as the default\nargument:\n\n    available_actions.get(action, lambda: None)()\n\nThis replaces the `try`\xe2\x80\xa6`except` construct in the previous example.\n'
p361
tp362
sS'votes'
p363
V+2
p364
sS'title'
p365
VPythonic way to implement switch/case statements
p366
sa(dp367
S'lang'
p368
VPython
p369
sS'body'
p370
(I0
S'A powerful tool for hackers, Python comes with a very rich set of\nhooks and tools allowing to do almost any kind of tricky tricks. For\ninstance, it is possible to do each of the following:\n\n*   change how objects are created and instantiated\n*   change how the Python interpreter imports modules\n*   it is even possible (and recommended if needed) to embed C\n    routines in Python.\n\nHowever, all these options have many drawbacks and it is always better\nto use the most straightforward way to achieve your goal. The main\ndrawback is that readability suffers deeply from them. Many code\nanalysis tools, such as pylint or pyflakes, will be unable to parse\nthis \xe2\x80\x9cmagic\xe2\x80\x9d code.\n\nWe consider that a Python developer should know about these nearly\ninfinite possibilities, because it grows the confidence that no\nhard-wall will be on the way. However, knowing how to use them and\nparticularly when not to use them is the most important.\n\nLike a Kungfu master, a Pythonista knows how to kill with a single\nfinger, and never to actually do it.\n\n[source\n(docs.python-guide.org)](http://docs.python-guide.org/en/latest/writing/style/#avoid-the-magical-wand)\n'
p371
tp372
sS'votes'
p373
V+1
p374
sS'title'
p375
VAvoid the magical wand
p376
sa(dp377
S'lang'
p378
VPython
p379
sS'body'
p380
(I0
S"Use inline comments sparingly.\n\nAn inline comment is a comment on the same line as a statement. Inline\ncomments should be separated by at least two spaces from the\nstatement. They should start with a `#` and a single space.\n\nInline comments are unnecessary and in fact distracting if they state\nthe obvious. Don't do this:\n\n    x = x + 1                 # Increment x\n\nBut sometimes, this is useful:\n\n    x = x + 1                 # Compensate for border\n\n[source\n(python.org)](http://legacy.python.org/dev/peps/pep-0008/#inline-comments)\n"
p381
tp382
sS'votes'
p383
V+1
p384
sS'title'
p385
VInline comments
p386
sa(dp387
S'lang'
p388
VPython
p389
sS'body'
p390
(I0
S'If you are checking for None, you should do\n\n    if foo is None:\n        ...\n\ninstead of\n\n    if foo == None:\n        ...\n\nSimilarly, use `foo is not None` instead of `foo != None`.\n'
p391
tp392
sS'votes'
p393
V+1
p394
sS'title'
p395
VCompare to None with is.
p396
sa(dp397
S'lang'
p398
VPython
p399
sS'body'
p400
(I0
S'Python allows many tricks, and some of them are potentially dangerous.\nA good example is that any client code can override an object\xe2\x80\x99s\nproperties and methods: there is no \xe2\x80\x9cprivate\xe2\x80\x9d keyword in Python.\nThis philosophy, very different from highly defensive languages like\nJava, which give a lot of mechanisms to prevent any misuse, is\nexpressed by the saying: \xe2\x80\x9cWe are consenting adults\xe2\x80\x9d.\n\nThis doesn\xe2\x80\x99t mean that, for example, no properties are considered\nprivate, and that no proper encapsulation is possible in Python. But,\ninstead of relying on concrete walls erected by the developers between\ntheir code and other\xe2\x80\x99s, the Python community prefers to rely on a\nset of conventions indicating that these elements should not be\naccessed directly.\n\n**The main convention for private properties and implementation\ndetails is to prefix all \xe2\x80\x9cinternals\xe2\x80\x9d with an underscore**. If the\nclient code breaks this rule and accesses these marked elements, any\nmisbehavior or problems encountered if the code is modified is the\nresponsibility of the client code.\n\nUsing this convention generously is encouraged: any method or property\nthat is not intended to be used by client code should be prefixed with\nan underscore. This will guarantee a better separation of duties and\neasier modifications of existing code, and it will always be possible\nto publicize a private property, while privatising a public property\nmight be a much harder operation.\n\n[source\n(docs.python-guide.org)](http://docs.python-guide.org/en/latest/writing/style/#we-are-all-consenting-adults)\n'
p401
tp402
sS'votes'
p403
V+1
p404
sS'title'
p405
VWe are all consenting adults
p406
sa(dp407
S'lang'
p408
VPython
p409
sS'body'
p410
(I0
S"Imports should be on separate lines. For example:\n\n**Good**\n\n    import os\n    import sys\n\n**Bad**\n\n    import os, sys\n\nImports are always put at the top of the file, just after any module\ncomments and doc strings and before module globals and constants.\nImports should be grouped with the order being most generic to least\ngeneric:\n\n*   standard library imports\n*   third-party imports\n*   application-specific imports\n\nWithin each grouping, imports should be sorted lexicographically,\nignoring case, according to each module's full package path.\n\n    import foo\n    from foo import bar\n    from foo.bar import baz\n    from foo.bar import Quux\n    from Foob import ar\n"
p411
tp412
sS'votes'
p413
V0
p414
sS'title'
p415
VImports formatting
p416
sa(dp417
S'lang'
p418
VPython
p419
sS'body'
p420
(I0
S'**\xe2\x80\x9cPrivate\xe2\x80\x9d** instance variables that cannot be accessed except\nfrom inside an object don\xe2\x80\x99t exist in Python. However, there is a\nconvention that is followed by most Python code: a name prefixed with\nan underscore (e.g. `_spam`) should be treated as a non-public part of\nthe API (whether it is a function, a method or a data member). It\nshould be considered an implementation detail and subject to change\nwithout notice.\n\nSince there is a valid use-case for class-private members (namely to\navoid name clashes of names with names defined by subclasses), there\nis limited support for such a mechanism, called name mangling. Any\nidentifier of the form `__spam` (at least two leading underscores, at\nmost one trailing underscore) is textually replaced with\n`_classname__spam`, where `classname` is the current class name with\nleading underscore(s) stripped. This mangling is done without regard\nto the syntactic position of the identifier, as long as it occurs\nwithin the definition of a class.\n\nName mangling is helpful for letting subclasses override methods\nwithout breaking intraclass method calls. For example:\n\n    class Mapping:\n        def __init__(self, iterable):\n            self.items_list = []\n            self.__update(iterable)\n\n        def update(self, iterable):\n            for item in iterable:\n                self.items_list.append(item)\n\n        __update = update   # private copy of original update() method\n\n    class MappingSubclass(Mapping):\n\n        def update(self, keys, values):\n            # provides new signature for update()\n            # but does not break __init__()\n            for item in zip(keys, values):\n                self.items_list.append(item)\n\nNote that the mangling rules are designed mostly to avoid accidents;\nit still is possible to access or modify a variable that is considered\nprivate. This can even be useful in special circumstances, such as in\nthe debugger.\n\nNotice that code passed to `exec`, `eval()` or `execfile()` does not\nconsider the classname of the invoking class to be the current class;\nthis is similar to the effect of the `global` statement, the effect of\nwhich is likewise restricted to code that is byte-compiled together.\nThe same restriction applies to `getattr()`, `setattr()` and\n`delattr()`, as well as when referencing `__dict__` directly.\n\n[source\n(docs.python.org)](http://docs.python.org/2/tutorial/classes.html#private-variables-and-class-local-references)\n'
p421
tp422
sS'votes'
p423
V0
p424
sS'title'
p425
VPrivate Variables and Class-local References
p426
sa(dp427
S'lang'
p428
VPython
p429
sS'body'
p430
(I0
S'The Python language provides a simple yet powerful syntax called\n\xe2\x80\x98decorators\xe2\x80\x99. A decorator is a function or a class that wraps (or\ndecorates) a function or a method. The \xe2\x80\x98decorated\xe2\x80\x99 function or\nmethod will replace the original \xe2\x80\x98undecorated\xe2\x80\x99 function or method.\nBecause functions are first-class objects in Python, it can be done\n\xe2\x80\x98manually\xe2\x80\x99, but using the @decorator syntax is clearer and thus\npreferred.\n\n    def foo():\n        # do something\n\n    def decorator(func):\n        # manipulate func\n        return func\n\n    foo = decorator(foo)  # Manually decorate\n\n    @decorator\n    def bar():\n        # Do something\n    # bar() is decorated\n\nThis mechanism is useful for separating concerns and avoiding external\nun-related logic \xe2\x80\x98polluting\xe2\x80\x99 the core logic of the function or\nmethod. A good example of a piece of functionality that is better\nhandled with decoration is memoization or caching: you want to store\nthe results of an expensive function in a table and use them directly\ninstead of recomputing them when they have already been computed. This\nis clearly not part of the function logic.\n\n[source\n(python-guide.org)](http://docs.python-guide.org/en/latest/writing/structure/#decorators)\n'
p431
tp432
sS'votes'
p433
V0
p434
sS'title'
p435
VDecorators
p436
sasVJavaScript
p437
(lp438
(dp439
S'lang'
p440
VJavaScript
p441
sS'body'
p442
(I0
S'It is almost always better to use the `===` and `!==` operators. The\n`==` and `!=` operators do type coercion. In particular, do not use\n`==` to compare against falsy values.\n\n> "If two operands are of the same type and value, then === produces\n> true and !== produces false." - JavaScript: The Good Parts\n'
p443
tp444
sS'votes'
p445
V+20
p446
sS'title'
p447
VUse === Instead of ==
p448
sa(dp449
S'lang'
p450
VJavaScript
p451
sS'body'
p452
(I0
S'**Always use semicolons.**\n\nRelying on implicit insertion can cause subtle, hard to debug\nproblems. Don\'t do it. You\'re better than that.\n\nThere are a couple places where missing semicolons are particularly\ndangerous:\n\n    // 1.\n    MyClass.prototype.myMethod = function() {\n      return 42;\n    }  // No semicolon here.\n\n    (function() {\n      // Some initialization code wrapped in a function to create a scope for locals.\n    })();\n\n\n    var x = {\n      \'i\': 1,\n      \'j\': 2\n    }  // No semicolon here.\n\n    // 2.  Trying to do one thing on Internet Explorer and another on Firefox.\n    // I know you\'d never write code like this, but throw me a bone.\n    [ffVersion, ieVersion][isIE]();\n\n\n    var THINGS_TO_EAT = [apples, oysters, sprayOnCheese]  // No semicolon here.\n\n    // 3. conditional execution a la bash\n    -1 == resultOfOperation() || die();\n\n**So what happens?**\n\n*   JavaScript error - first the function returning 42 is called with\n    the second function as a parameter, then the number 42 is "called"\n    resulting in an error.\n*   You will most likely get a \'no such property in undefined\' error\n    at runtime as it tries to call `x[ffVersion, ieVersion][isIE]()`.\n*   `die` is always called since the array minus 1 is NaN which is\n    never equal to anything (not even if `resultOfOperation()` returns\n    `NaN`) and `THINGS_TO_EAT` gets assigned the result of `die()`.\n\n**Why?**\n\nJavaScript requires statements to end with a semicolon, except when it\nthinks it can safely infer their existence. In each of these examples,\na function declaration or object or array literal is used inside a\nstatement. The closing brackets are not enough to signal the end of\nthe statement. Javascript never ends a statement if the next token is\nan infix or bracket operator.\n\nThis has really surprised people, so make sure your assignments end\nwith semicolons.\n\n**Clarification: Semicolons and functions**\n\nSemicolons should be included at the end of function expressions, but\nnot at the end of function declarations. The distinction is best\nillustrated with an example:\n\n    var foo = function() {\n      return true;\n    };  // semicolon here.\n\n    function foo() {\n      return true;\n    }  // no semicolon here.\n'
p453
tp454
sS'votes'
p455
V+17
p456
sS'title'
p457
VSemicolons
p458
sa(dp459
S'lang'
p460
VJavaScript
p461
sS'body'
p462
(I0
S'Life is too short to worry about poor indentation-induced bugs.\nInstead of this:\n\n    if (ready())\n        doSomething();\n        doOther();\n        //Is the above bad indentation or forgotten braces?\n        //Why even have to wonder?\n\nPrefer to be clear:\n\n    if (ready()) {\n        doSomething();\n        doOther();\n    }\n\nOr:\n\n    if (ready()) {\n        doSomething();\n    }\n        doOther(); //clearly a simple indentation flaw\n'
p463
tp464
sS'votes'
p465
V+15
p466
sS'title'
p467
VAlways use the curly braces, even when optional
p468
sa(dp469
S'lang'
p470
VJavaScript
p471
sS'body'
p472
(I0
S'JavaScript programs should be stored in and delivered as `.js` files.\n\nJavaScript code should not be embedded in HTML files unless the code\nis specific to a single session. Code in HTML adds significantly to\npageweight with no opportunity for mitigation by caching and\ncompression.\n\n`<script src=filename.js>` tags should be placed as late in the body\nas possible. This reduces the effects of delays imposed by script\nloading on other page components. There is no need to use the\n`language` or `type` attributes. It is the server, not the script tag,\nthat determines the MIME type.\n\n[source\n(javascript.crockford.com)](http://javascript.crockford.com/code.html)\n'
p473
tp474
sS'votes'
p475
V+8
p476
sS'title'
p477
VJavaScript Files
p478
sa(dp479
S'lang'
p480
VJavaScript
p481
sS'body'
p482
(I0
S'Global variables and function names are an incredibly bad idea. The\nreason is that every JavaScript file included in the page runs in the\nsame scope. If you have global variables or functions in your code,\nscripts included after yours that contain the same variable and\nfunction names will overwrite your variables/functions.\n\nThere are several workarounds to avoid using globals \xe2\x80\x94 we\xe2\x80\x99ll go\nthrough them one by one now. Say you have three functions and a\nvariable like this:\n\n    var current = null;\n    function init(){...}\n    function change(){...}\n    function verify(){...}\n\nYou can protect those from being overwritten by using an object\nliteral:\n\n    var myNameSpace = {\n      current:null,\n      init:function(){...},\n      change:function(){...},\n      verify:function(){...}\n    }\n\nThis does the job, but there is a drawback \xe2\x80\x94 to call the functions\nor change the variable value you\xe2\x80\x99ll always need to go via the name\nof the main object: `init()` is `myNameSpace.init()`, current is\n`myNameSpace.current` and so on. This can get annoying and repetitive.\n\nIt is easier to wrap the whole thing in an anonymous function and\nprotect the scope that way. That also means you don\xe2\x80\x99t have to switch\nsyntax from `function name()` to `name:function()`. **This trick is\ncalled the Module Pattern**:\n\n    myNameSpace = function(){\n      var current = null;\n      function init(){...}\n      function change(){...}\n      function verify(){...}\n    }();\n\nAgain, this appproach is not without issues. None of these are\navailable from the outside at all any more. If you want to make them\navailable you need to wrap the things you want to make public in a\n`return` statement:\n\n    myNameSpace = function(){\n      var current = null;\n      function verify(){...}\n      return{\n        init:function(){...}\n        change:function(){...}\n      }\n    }();\n\nThat pretty much brings us back to square one in terms of linking from\none to the other and changing syntax. I therefore prefer to do\nsomething like the following (which I dubbed the \xe2\x80\x9crevealing module\npattern\xe2\x80\x9d):\n\n    myNameSpace = function(){\n      var current = null;\n      function init(){...}\n      function change(){...}\n      function verify(){...}\n      return{\n        init:init,\n        change:change\n      }\n    }();\n\nInstead of returning the properties and methods I just return pointers\nto them. This makes it easy to call functions and access variables\nfrom other places without having to go through the `myNameSpace` name.\n\nIt also means that you can have a public alias for a function in case\nyou want to give it a longer, descriptive name for internal linking\nbut a shorter one for the outside:\n\n    myNameSpace = function(){\n      var current = null;\n      function init(){...}\n      function change(){...}\n      function verify(){...}\n      return{\n        init:init,\n        set:change\n      }\n    }();\n\nCalling `myNameSpace.set()` will now invoke the `change()` method.\n\nIf you don\xe2\x80\x99t need any of your variables or functions to be available\nto the outside, simply wrap the whole construct in another set of\nparentheses to execute it without assigning any name to it:\n\n    (function(){\n      var current = null;\n      function init(){...}\n      function change(){...}\n      function verify(){...}\n    })();\n\nThis keeps everything in a tidy little package that is inaccessible to\nthe outside world, but very easy to share variables and functions\ninside of.\n\n[source\n(w3.org)](http://www.w3.org/wiki/JavaScript_best_practices#Avoid_globals)\n'
p483
tp484
sS'votes'
p485
V+5
p486
sS'title'
p487
VAvoid globals
p488
sa(dp489
S'lang'
p490
VJavaScript
p491
sS'body'
p492
(I0
S'`eval()` is a dangerous function, which executes the code it\'s passed\nwith the privileges of the caller. If you run eval() with a string\nthat could be affected by a malicious party, you may end up running\nmalicious code on the user\'s machine with the permissions of your\nwebpage / extension. More importantly, third party code can see the\nscope in which eval() was invoked, which can lead to possible attacks\nin ways of which the similar Function is not susceptible.\n\n`eval()` is also generally slower than the alternatives, since it has\nto invoke the JS interpreter, while many other constructs are\noptimized by modern JS engines.\n\nThere are safe (and fast!) alternatives to eval() for common\nuse-cases.\n\n**Update**\n\nTo give some alternatives to avoid the use of eval, let\'s `set` the\nbackground of an _element_ , which has an _id_ stored in the variable\n`cicle`:\n\n    eval(\'document.\' + circle + \'.style.background = "green"\');\n\nThe use of `eval()` it\'s not necessary if you use square brackets on\nthe `document` object to have access to `circle` DOM tree:\n\n    document[circle].style.background = \'green\';\n\nthis also make it easy to read.\n\nA better way and _easy to read_ `eval()` will be:\n\n    document.getElementById(circle).style.background = \'green\';\n\n**Security**\n\nThe use of `eval()` is always related with security issues, which\nmight be true for [Cross-site\nscripting](http://en.wikipedia.org/wiki/Cross-site_scripting) (XSS)\nattaks since by definition `eval()` executes arbitrary code in the\ncontext of the page. This can be dangerous if you are taking user\ninput and running it through `eval()`. Never ever do that. However, if\nyour use of `eval()` has input that only you control and this one\ncan\'t be modified by any user, then there are no security risks.\n\nReference:\n\n[Eval is evil\xe2\x80\xa6 So what should I use instead?\n(stackoverflow.com)](http://stackoverflow.com/questions/646597/eval-is-evil-so-what-should-i-use-instead)\n\n[eval() isn\'t evil, just\nmisundrstood](http://www.nczonline.net/blog/2013/06/25/eval-isnt-evil-just-misunderstood/)\nby Nicholas C. Zakas\n'
p493
tp494
sS'votes'
p495
V+4
p496
sS'title'
p497
VEval is Evil
p498
sa(dp499
S'lang'
p500
VJavaScript
p501
sS'body'
p502
(I0
S'Use {} instead of new Object(). Use [] instead of new Array().\n\nUse arrays when the member names would be sequential integers. Use\nobjects when the member names are arbitrary strings or names.\n\n**Benefits**\n\n*   Shorter and more readable\n*   Safer - literals will still work when the Array or Object\n    constructors have been overridden\n'
p503
tp504
sS'votes'
p505
V+3
p506
sS'title'
p507
V{} and []
p508
sa(dp509
S'lang'
p510
VJavaScript
p511
sS'body'
p512
(I0
S'Lines should wrap at **no more than 80\xe2\x80\x93100 characters**. If a\nstatement does not fit on a line, split the statement over multiple\nlines. If possible, place the line break after an operator (e.g. a\ncomma or logical operator). The next line should be indented an extra\nlevel. Function calls and objects should either be on a single line or\nsplit over multiple lines with 1 line for each segment. Avoid mixing\nthe number of segments per line or ending a call or object in the\nmiddle of an indentation level. Line breaking examples\n\n**Yes**\n\n    // One line\n    if ( mw.foo.hasBar() && mw.foo.getThis() === \'that\' ) {\n        return { first: \'Who\', second: \'What\' };\n    } else {\n        mw.foo( \'first\', \'second\' );\n    }\n\n    // Multi-line (one component per line)\n    if ( mw.foo.hasBar() &&\n        mw.foo.getThis() === \'that\' &&\n        !mw.foo.getThatFrom(\'this\')\n    ) {\n        // Line break after "&&".\n        // Continuation of condition indented one level.\n        // Condition closed at original indentation.\n        return {\n            first: \'Who\',\n            second: \'What\',\n            third: \'I don\\\'t know\'\n        };\n    }  else {\n        mw.foo(\n            \'first\',\n            \'second\'\n        );\n    }\n\n**No**\n\n    if ( mw.foo.hasBar() && mw.foo.getThis() === \'that\' &&\n        !mw.foo.getThatFrom(\'this\') ) {\n        // No varying number of segments per line.\n        // Closing parenthesis should be on the left.\n        return { first: \'Who\', second: \'What\',\n            third: \'I don\\\'t know\'\n        };\n    } else {\n        mw.foo( \'first\', \'second\',\n            \'third\' );\n\n        // Avoid statements looking like they are broken\n        // up but still together (looks like a call with\n        // one parameter). \n        mw.foo(\n            \'first\', \'second\', \'third\'\n        );\n\n        mw.foo(\n            [\'first\', \'array\', \'parameter\'], \'second\'\n        );\n    }\n\n---\n\n**Update**\n\nAs mhmxs in a comment mentioned, in modern monitors the best line\nlength could be from **120 - 140 chars**.\n\n[source\n(mediawiki.org)](http://www.mediawiki.org/wiki/Manual:Coding_conventions/JavaScript#Line_length)\n'
p513
tp514
sS'votes'
p515
V+2
p516
sS'title'
p517
VLine length
p518
sa(dp519
S'lang'
p520
VJavaScript
p521
sS'body'
p522
(I0
S'Writing code specific to a certain browser is a sure-fire way to keep\nyour code hard to maintain and make it get dated really quickly. If\nyou look around the web you\xe2\x80\x99ll find a lot of scripts that expect a\ncertain browser and stop working as soon as a new version or another\nbrowser comes around.\n\nThis is wasted time and effort \xe2\x80\x94 we should build code based on\nagreed standards as outlined in this course of articles, not for one\nbrowser. The web is for everybody, not an elite group of users with a\nstate-of-the-art configuration. As the browser market moves quickly\nyou will have to go back to your code and keep fixing it. This is\nneither effective nor fun.\n\n**If something amazing works in one browser only and you really have\nto use it, put that code in its own script document and name it with\nbrowser and version.** This means that you can find and remove this\nfunctionality more easily, should this browser become obsolete.\n\n[source\n(w3.org)](http://www.w3.org/wiki/JavaScript_best_practices#Don.E2.80.99t_yield_to_browser_whims)\n'
p523
tp524
sS'votes'
p525
V+2
p526
sS'title'
p527
VDon\u2019t yield to browser whims
p528
sa(dp529
S'lang'
p530
VJavaScript
p531
sS'body'
p532
(I0
S'    function Utility(){}\n\n[source\n(geekswithblogs.net)](http://www.geekswithblogs.net/lbugnion/archive/2007/02/05/105493.aspx)\n'
p533
tp534
sS'votes'
p535
V+2
p536
sS'title'
p537
VUse Pascal casing for naming Class
p538
sa(dp539
S'lang'
p540
VJavaScript
p541
sS'body'
p542
(I0
S'Always indent the body of a function relative to the function keyword,\neven in argument lists, object literals, etc.\n\nA simple example:\n\n    $.each(graph.series,\n           function(k, v) {\n             if (v.value)\n               paths[v.value.order] = v.node;\n           });\n\nThis one is more complex; the inner function is in an object literal\nwhich is in an argument list.\n\n    function fetchMore(event, state, query) {\n        $.ajax("/calls/recent.json",\n               { cache: false,\n                 timeout: 30000,\n                 success: fetcher.success,\n                 error: function (xhr, status, error) {\n                            return fetcher[(status == "timeout") ? "timeout" : "failure"]\n                                          .apply(null, arguments);\n                        }\n               });\n        return "requesting";\n    }\n'
p543
tp544
sS'votes'
p545
V+2
p546
sS'title'
p547
Vindent function bodies relative to the function keyword
p548
sa(dp549
S'lang'
p550
VJavaScript
p551
sS'body'
p552
(I0
S"*   Declare all the variables you're going to use at the top of the\n    function.\n*   Do not set the value to `undefined` if it does not have a value\n    yet. If needed, set it to `null`\n*   If it is not empty, declare only one per line\n\n**_Example (2 spaces indent)_**\n\n    function foo () {\n      var a = 1,\n        b = 2,\n        c = null,\n        d, e, f, g;\n    }\n\n**_Example (4 spaces indent)_**\n\n    function foo () {\n        var a = 1,\n            b = 2,\n            c = null,\n            d, e, f, g;\n    }\n\n**_NPM styleguide_**\n\nYou can use the [npm\nstyle](https://www.npmjs.org/doc/misc/npm-coding-style.html) for\nvariable declarations to get a cleaner list:\n\n    function foo () {\n      var a = 1\n        , b = 2\n        , c = null\n        , d, e, f, g\n    }\n"
p553
tp554
sS'votes'
p555
V+2
p556
sS'title'
p557
VUse only one var declaration per scope
p558
sa(dp559
S'lang'
p560
VJavaScript
p561
sS'body'
p562
(I0
S"When wrapping a binary operator expression stick the operator at the\nbeginning of the line.\n\nIt makes it stick like a sore thumb when you scan the code, and you\ncan't miss that you're in the middle of an expression (and wrapping\nexpressions is always a bit awkward).\n\n    if (verylongCond1 || veryLongCond2 \n            || veryLongCond3)\n        a = longStuff1 + longStuff2\n                + longStuff3;\n"
p563
tp564
sS'votes'
p565
V+2
p566
sS'title'
p567
Vstick binary operators at the head of line when you wrap
p568
sa(dp569
S'lang'
p570
VJavaScript
p571
sS'body'
p572
(I0
S'All of your JavaScript code should be wrapped in an Immediately\nInvoked Anonymous Function (IIFE) to prevent accidental scope leakage\nand to allow black boxing of functionality. Favor namespaced objects\nthat are assigned public interfaces.\n\nBy "namespaced" objects I mean, instead of defining your JavaScript\nvalues globally (and therefore having them all attached to `window`)\nuse a single namespace style value for your application, like\n`window.MyApplication = {}`, that all your public interface objects\nand methods will be attached.\n\nExample:\n\n    (function() {\n      var PublicClass = function() {\n        privateFunction();\n      };\n\n      var privateFunction = function() { /* more stuff */ };\n\n      // Only publicize what is necessary\n      if (window.MyApplication == null || typeof(window.MyApplication) === "undefined") {\n        window.MyApplication = {};\n      }\n      window.MyApplication.PublicClass = PublicClass;\n    })();\n'
p573
tp574
sS'votes'
p575
V+2
p576
sS'title'
p577
VUse IIFE for your code and manage namespace-esque objects instead of global definitions.
p578
sa(dp579
S'lang'
p580
VJavaScript
p581
sS'body'
p582
(I0
S'    Example.behaviors.tableDrag = function (context) {\n      ...\n      div.onclick = function (e) {\n        return false;\n      };\n      ...\n    };\n    function funStuff(field, settings) {\n      settings = settings || Drupal.settings;\n      alert("This JS file does fun message popups.");\n      return field;\n    }\n\n*   There should be no space between the function name and the\n    following left parenthesis.\n*   Exception: If a function literal is anonymous, there should be a\n    single space between the word "function" and the left parenthesis\n    "(". Otherwise, it can appear that the function\'s name is actually\n    "function".\n*   Define optional arguments (using default values) at the end of the\n    function signature.\n*   Always attempt to return a meaningful value from a function if one\n    is appropriate.\n\n**Note**: The above examples code are lacking JSDoc and comments, only\nfor clarity.\n\n[source (drupal.org)](https://drupal.org/node/172169)\n'
p583
tp584
sS'votes'
p585
V+1
p586
sS'title'
p587
VFunction Declarations
p588
sa(dp589
S'lang'
p590
VJavaScript
p591
sS'body'
p592
(I0
S"Functions should be called with no spaces between the function name,\nthe opening parenthesis, and the first parameter; spaces between\ncommas and each parameter, and no space between the last parameter,\nthe closing parenthesis, and the semicolon. Here's an example:\n\n    foobar = foo(bar, baz, quux);\n\nAs displayed above, there should be one space on either side of an\nequals sign used to assign the return value of a function to a\nvariable. In the case of a block of related assignments, more space\nmay be inserted to promote readability:\n\n    short        = foo(bar);\n    longVariable = foo(baz);\n\n[source (drupal.org)](https://drupal.org/node/172169)\n"
p593
tp594
sS'votes'
p595
V+1
p596
sS'title'
p597
VFunction Calls
p598
sa(dp599
S'lang'
p600
VJavaScript
p601
sS'body'
p602
(I0
S"If you're writing a one-off chunk of JavaScript that never needs to be\nreferred to by other code, it's wise to anonymously scope it so it\nwon't get accidentally referenced elsewhere.\n\nTo do this, just wrap your code in an anonymous function closure:\n\n    // An anonymous function that can never be referenced by name...\n    (function(){\n        var x = 123;\n        console.log(x);\n    })(); // Call the anonymous function once, then throw it away!\n\n    console.log(x);\n\nIn the code above, the first `console.log()` will succeed, but the\nsecond will fail. You won't be able to reference `x` outside of the\nanonymous function.\n\n[source\n(github)](https://github.com/stevekwan/best-practices/blob/master/javascript/best-practices.md#anonymously-scope-javascript-if-youre-never-going-to-call-it-elsewhere)\n"
p603
tp604
sS'votes'
p605
V+1
p606
sS'title'
p607
VAnonymously scope JavaScript if you\u2019re never going to call it elsewhere.
p608
sa(dp609
S'lang'
p610
VJavaScript
p611
sS'body'
p612
(I0
S'Some things cause a big dip in performance, such as:\n\n*   Excessive DOM changes that force the page to re-render\n*   Events that get fired all the time (for example,\n    resizing/scrolling)\n*   Lots of HTTP requests (and even this is becoming less important).\n\nThese are problems you should address. Fixing them could result in\nless page stuttering.\n\nHowever, there are a lot of other "problems" that have very little\nimpact on page performance. Yes, you may be able to shave off a few\nmilliseconds by optimizing your selectors or caching function results,\nbut is it worth the effort?\n\nIf your optimizations are making your code uglier (and thus more\ndifficult to maintain), ask yourself: are these "optimizations" worth\nit? For most webpages, 1ms isn\'t going to make or break the user\nexperience. There are probably better uses of your time.\n\n[source\n(github)](https://github.com/stevekwan/best-practices/blob/master/javascript/best-practices.md#when-optimizating-focus-on-the-big-things)\n'
p613
tp614
sS'votes'
p615
V+1
p616
sS'title'
p617
VWhen optimizing, focus on the big things
p618
sa(dp619
S'lang'
p620
VJavaScript
p621
sS'body'
p622
(I0
S'If you are going to code in JavaScript, do yourself a favor and force\ngood coding practices upon yourself and your teammates. JSLint is like\nstrict mode on steroids. Its goal is to limit you to the "good parts"\nof JavaScript while avoiding the rest.\n'
p623
tp624
sS'votes'
p625
V+1
p626
sS'title'
p627
VUse JSLint
p628
sa(dp629
S'lang'
p630
VJavaScript
p631
sS'body'
p632
(I0
S'There are no exceptions; don\'t let complicated argument values throw\nyou off.\n\nGood:\n\n    doTheStuff(foo,\n               bar,\n               baz);\n\nBad:\n\n    doTheStuff(foo,\n      bar,\n      baz);\n\nGood:\n\n    doTheStuff(foo,\n               { x: 42,\n                 other: "the quick brown fox jumped over the lazy dog."\n               },\n               function (bar, baz) {\n                   if (tooSmall(bar)) {\n                       baz(42);\n                   }\n               });\n\nBad:\n\n    doTheStuff(foo, { x: 42,\n        other: "the quick brown fox jumped over the lazy dog."\n    }, function (bar, baz) {\n        if (tooSmall(bar)) {\n            baz(42);\n        }\n    });\n'
p633
tp634
sS'votes'
p635
V+1
p636
sS'title'
p637
VAlways line up function arguments to the same column when wrapping them across lines
p638
sa(dp639
S'lang'
p640
VJavaScript
p641
sS'body'
p642
(I0
S"Whilst it is possible to create everything you need in a document\nusing JavaScript and the DOM it is not necessarily the most effective\nway of doing so. The following code puts a red border around every\ninput field when its class is \xe2\x80\x9cmandatory\xe2\x80\x9d and there\xe2\x80\x99s nothing in\nit.\n\n    var f = document.getElementById('mainform');\n    var inputs = f.getElementsByTagName('input');\n    for(var i=0,j=inputs.length;i<j;i++){\n      if(inputs[i].className === 'mandatory' &&\n         inputs[i].value === ''){\n        inputs[i].style.borderColor = '#f00';\n        inputs[i].style.borderStyle = 'solid';\n        inputs[i].style.borderWidth = '1px';\n      }\n    }\n\nThis works, however it means that if you later need to make a change\nto these styles you need to go through the JavaScript and apply the\nchanges there. The more complex the change is the harder it\xe2\x80\x99ll be to\nedit this. Furthermore, not every JavaScript developer is proficient\nor interested in CSS, which means there\xe2\x80\x99ll be a lot of back and\nforth until the outcome is reached. By adding a class called\n\xe2\x80\x9cerror\xe2\x80\x9d to the element when there is an error, you can ensure that\nthe styling information is kept inside the CSS, which is more\nappriate:\n\n    var f = document.getElementById('mainform');\n    var inputs = f.getElementsByTagName('input');\n    for(var i=0,j=inputs.length;i<j;i++){\n      if(inputs[i].className === 'mandatory' &&\n         inputs[i].value === ''){\n        inputs[i].className += ' error';\n      }\n    }\n\nThis is much more efficient as CSS was meant to cascade through the\ndocument. Say for example you want to hide all DIVs with a certain\nclass in a document. You could loop through all the DIVs, check their\nclasses and then change their style collection. In newer browsers you\ncould use a CSS selector engine and then alter the style collection.\nThe easiest way however is to use JavaScript to set a class on a\nparent element and use syntax along the lines of element.triggerclass\ndiv.selectorclass{} in the CSS. Keep the job of actually hiding the\nDIVs to the CSS designer, as he\xe2\x80\x99ll know the best way of doing that.\n\n[source\n(w3.org)](http://www.w3.org/wiki/JavaScript_best_practices#Avoid_mixing_with_other_technologies)\n"
p643
tp644
sS'votes'
p645
V+1
p646
sS'title'
p647
VAvoid mixing with other technologies
p648
sa(dp649
S'lang'
p650
VJavaScript
p651
sS'body'
p652
(I0
S"Minification is the practice of removing unnecessary characters from\ncode to reduce its size thereby improving load times. When code is\nminified all comments are removed, as well as unneeded white space\ncharacters (space, newline, and tab). In the case of JavaScript, this\nimproves response time performance because the size of the downloaded\nfile is reduced. Two popular tools for minifying JavaScript code are\n[UglifyJS](https://github.com/mishoo/UglifyJS) and [YUI\nCompressor](http://yui.github.io/yuicompressor/). The YUI compressor\ncan also minify CSS.\n\nObfuscation is an alternative optimization that can be applied to\nsource code. It's more complex than minification and thus more likely\nto generate bugs as a result of the obfuscation step itself. In a\nsurvey of ten top U.S. web sites, minification achieved a 21% size\nreduction versus 25% for obfuscation. Although obfuscation has a\nhigher size reduction, minifying JavaScript is less risky.\n\nIn addition to minifying external scripts and styles, inlined\n`<script>` and `<style>` blocks can and should also be minified. Even\nif you gzip your scripts and styles, minifying them will still reduce\nthe size by 5% or more. As the use and size of JavaScript and CSS\nincreases, so will the savings gained by minifying your code.\n\n[source\n(yahoo.com)](http://developer.yahoo.com/performance/rules.html#minify)\n"
p653
tp654
sS'votes'
p655
V+1
p656
sS'title'
p657
VMinify JavaScript and CSS
p658
sa(dp659
S'lang'
p660
VJavaScript
p661
sS'body'
p662
(I0
S"Loops can become very slow if you don\xe2\x80\x99t do them right. One of the\nmost common mistake is to read the length attribute of an array at\nevery iteration:\n\n    var names = ['George','Ringo','Paul','John'];\n    for(var i=0;i<names.length;i++){\n      doSomeThingWith(names[i]);\n    }\n\nThis means that every time the loop runs, JavaScript needs to read the\nlength of the array. You can avoid that by storing the length value in\na different variable:\n\n    var names = ['George','Ringo','Paul','John'];\n    var all = names.length;\n    for(var i=0;i<all;i++){\n      doSomeThingWith(names[i]);\n    }\n\nAn even shorter way of achieving this is to create a second variable\nin the pre-loop statement:\n\n    var names = ['George','Ringo','Paul','John'];\n    for(var i=0,j=names.length;i<j;i++){\n      doSomeThingWith(names[i]);\n    }\n\nAnother thing to ensure is that you keep computation-heavy code\noutside loops. This includes regular expressions and \xe2\x80\x94 more\nimportantly \xe2\x80\x94 DOM manipulation. You can create the DOM nodes in the\nloop but avoid inserting them into the document. You\xe2\x80\x99ll find more on\nDOM best practices in the next section.\n\n[source\n(w3.org)](http://www.w3.org/wiki/JavaScript_best_practices#Optimize_loops)\n"
p663
tp664
sS'votes'
p665
V0
p666
sS'title'
p667
VOptimize loops
p668
sa(dp669
S'lang'
p670
VJavaScript
p671
sS'body'
p672
(I0
S'Use Object() if the array is just a hash table with strings or numbers\nas key.\n\nUse an Array() only if you use Array properties like length or Array\nmethods like push(), slice() etc.\n\nExample: The system id is the key in the hash table `pv.aoTags`\n\n    pv.aoTags = new Object();\n\n    // create a new Tag and add it to the hash table\n    var oTag = new Tag("13.4.543.122");\n    pv.aoTags[oTag.strSystemId] = oTag;\n\n    // trace all Tags in the hash table\n    for (var strKey in pv.aoTags)\n        TraceWindow.traceMsg(strKey + ": " + pv.aoTags[strKey]);\n\n[source\n(geekswithblogs.net)](http://www.geekswithblogs.net/lbugnion/archive/2007/02/05/105493.aspx)\n'
p673
tp674
sS'votes'
p675
V0
p676
sS'title'
p677
VUse Object instead of Array for \u201cHash Table\u201d
p678
sa(dp679
S'lang'
p680
VJavaScript
p681
sS'body'
p682
(I0
S"Use it, but be careful\n\nThe ability to create closures is perhaps the most useful and often\noverlooked feature of JS. Here is [a good description of how closures\nwork\n(jibbering.com)](http://jibbering.com/faq/faq_notes/closures.html).\n\nOne thing to keep in mind, however, is that a closure keeps a pointer\nto its enclosing scope. As a result, attaching a closure to a DOM\nelement can create a circular reference and thus, a memory leak. For\nexample, in the following code:\n\n**BAD**\n\n    function foo(element, a, b) {\n      element.onclick = function() { /* uses a and b */ };\n    }\n\nthe function closure keeps a reference to element, a, and b even if it\nnever uses element. Since element also keeps a reference to the\nclosure, we have a cycle that won't be cleaned up by garbage\ncollection. In these situations, the code can be structured as\nfollows:\n\n**GOOD**\n\n    function foo(element, a, b) {\n      element.onclick = bar(a, b);\n    }\n\n    function bar(a, b) {\n      return function() { /* uses a and b */ };\n    }\n\n[source\n(google.com)](https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml?showone=Closures#Closures)\n"
p683
tp684
sS'votes'
p685
V0
p686
sS'title'
p687
VClosures
p688
sa(dp689
S'lang'
p690
VJavaScript
p691
sS'body'
p692
(I0
S"    Example.behaviors.tableDrag = function (context) {\n      for (var base in Drupal.settings.tableDrag) {\n        if (!$('#' + base + '.tabledrag-processed', context).size()) {\n          $('#' + base).filter(':not(.tabledrag-processed)').each(addBehavior);\n          $('#' + base).addClass('tabledrag-processed');\n        }\n      }\n    };\n\n*   Functions and methods should be named in lowerCamelCase.\n*   Function names should begin with the name of the module or theme\n    declaring the function to avoid collisions.\n\n[source (drupal.org)](https://drupal.org/node/172169)\n"
p693
tp694
sS'votes'
p695
V0
p696
sS'title'
p697
VFunction and method names
p698
sa(dp699
S'lang'
p700
VJavaScript
p701
sS'body'
p702
(I0
S'Passing PHP variables to JS variables is easy.\n\nYou need to echo out a hidden text input with the value of the desired\nvariable in PHP. Like this:\n\n    echo "<input type=\'hidden\' value =\'". $_GET[\'id\'] ."\' id=\'get_id\'>";\n\nThen you go to your JS code and you capture the value of the input in\na `var`. Like this:\n\n    var element = document.getElementById(\'get_id\');\n    var id = element.value;\n\nOr in jQuery:\n\n    var id = $("#get_id").val();\n\nI don\'t know if it\'s possible the other way round.\n'
p703
tp704
sS'votes'
p705
V0
p706
sS'title'
p707
VPassing PHP variables to JavaScript variables
p708
sa(dp709
S'lang'
p710
VJavaScript
p711
sS'body'
p712
(I0
S'Most people put the closing brace of an loop or conditional on a new\nline, all on it\'s own. The closing parenthesis of a function call,\neven one wrapped across lines, is almost never put on its own line. We\nshould seek to be consistent with ourselves, and therefore should\nnever put any of these on a new line, all by themselves.\n\nGood:\n\n    doTheStuff(foo,\n               bar,\n               baz);\n\nBad:\n\n    doTheStuff(foo,\n               bar,\n               baz\n    );\n\nGood:\n\n    [x,\n     y,\n     z]\n\nBad:\n\n    [x,\n     y,\n     z\n    ]\n\nGood:\n\n    function setCurrent(v) {\n        $(current).parent().parent().removeClass("current");\n        if (v) {\n            $(v).parent().parent().addClass("current"); }\n        return current = v; }\n\nBad:\n\n    function setCurrent(v) {\n        $(current).parent().parent().removeClass("current");\n        if (v) {\n            $(v).parent().parent().addClass("current");\n        }\n        return current = v;\n    }\n\nGood:\n\n    function fetchMore(event, state, query) {\n        $.ajax("/calls/recent.json",\n               { cache: false,\n                 timeout: 30000,\n                 success: fetcher.success,\n                 error: function (xhr, status, error) {\n                            return fetcher[(status == "timeout") ? "timeout" : "failure"]\n                                          .apply(null, arguments); }});\n        return "requesting"; }\n\nBad:\n\n    function fetchMore(event, state, query) {\n        $.ajax("/calls/recent.json",\n               { cache: false,\n                 timeout: 30000,\n                 success: fetcher.success,\n                 error: function (xhr, status, error) {\n                            return fetcher[(status == "timeout") ? "timeout" : "failure"]\n                                          .apply(null, arguments);\n                        }\n               });\n        return "requesting";\n    }\n\nThis is one that I feel constrained not to do, usually because my\ncolleagues protest. Most of them haven\'t done much lisp programming\nthough...\n'
p713
tp714
sS'votes'
p715
V0
p716
sS'title'
p717
VPut closing parens/brackets/braces on the same line as the value/expression they are closing
p718
sa(dp719
S'lang'
p720
VJavaScript
p721
sS'body'
p722
(I0
S"**Bad:**\n\n    var myString = 'A rather long string of English text, an error message \\\n                    actually that just keeps going and going -- an error \\\n                    message to make the Energizer bunny blush (right through \\\n                    those Schwarzenegger shades)! Where was I? Oh yes, \\\n                    you\\'ve got an error and all the extraneous whitespace is \\\n                    just gravy.  Have a nice day.';\n\n**Good (Using concatenation)**\n\n    var myString = 'A rather long string of English text, an error message ' +\n        'actually that just keeps going and going -- an error ' +\n        'message to make the Energizer bunny blush (right through ' +\n        'those Schwarzenegger shades)! Where was I? Oh yes, ' +\n        'you\\'ve got an error and all the extraneous whitespace is ' +\n        'just gravy.  Have a nice day.';\n\n**Why?**\n\nThe whitespace at the beginning of each line can't be safely stripped\nat compile time; and while most script engines support this, it is not\npart of [ECMAScript](http://www.ecmascript.org/about.php).\n"
p723
tp724
sS'votes'
p725
V0
p726
sS'title'
p727
VMultiline string
p728
sa(dp729
S'lang'
p730
VJavaScript
p731
sS'body'
p732
(I0
S"This is a general programming best practice \xe2\x80\x94 making sure that you\ncreate functions that fulfill one job at a time makes it easy for\nother developers to debug and change your code without having to scan\nthrough all the code to work out what code block performs what\nfunction. This also applies to creating helper functions for common\ntasks. If you find yourself doing the same thing in several different\nfunctions then it is a good idea to create a more generic helper\nfunction instead, and reuse that functionality where it is needed.\nAlso, one way in and one way out makes more sense than forking the\ncode in the function itself. Say you wanted to write a helper function\nto create new links. You could do it like this:\n\n    function addLink(text,url,parentElement){\n      var newLink = document.createElement('a');\n      newLink.setAttribute('href',url);\n      newLink.appendChild(document.createTextNode(text));\n      parentElement.appendChild(newLink);\n    }\n\nThis works ok, but you might find yourself having to add different\nattributes depending on which elements you apply the link to. For\nexample:\n\n    function addLink(text,url,parentElement){\n      var newLink = document.createElement('a');\n      newLink.setAttribute('href',url);\n      newLink.appendChild(document.createTextNode(text));\n      if(parentElement.id === 'menu'){\n        newLink.className = 'menu-item';\n      }\n      if(url.indexOf('mailto:')!==-1){\n        newLink.className = 'mail';\n      }\n      parentElement.appendChild(newLink);\n    }\n\nThis makes the function more specific and harder to apply to different\nsituations. A cleaner way is to return the link and cover the extra\ncases in the main functions that need them. This turns `addLink()`\ninto the more generic `createLink()`:\n\n    function createLink(text,url){\n      var newLink = document.createElement('a');\n      newLink.setAttribute('href',url);\n      newLink.appendChild(document.createTextNode(text));\n      return newLink;\n    }\n\n    function createMenu(){\n      var menu = document.getElementById('menu');\n      var items = [\n        {t:'Home',u:'index.html'},\n        {t:'Sales',u:'sales.html'},\n        {t:'Contact',u:'contact.html'}\n      ];\n      for(var i=0;i<items.length;i++){\n        var item = createLink(items.t,items.u);\n        item.className = 'menu-item';\n        menu.appendChild(item);\n      }\n    }\n\nBy having all your functions only perform one task you can have a main\n`init()` function for your application that contains all the\napplication structure. That way you can easily change the application\nand remove functionality without having to scan the rest of the\ndocument for dependencies.\n\n[Reference:\nw3.org](http://www.w3.org/wiki/JavaScript_best_practices#Modularize_.E2.80.94_one_function_per_task)\n"
p733
tp734
sS'votes'
p735
V0
p736
sS'title'
p737
VModularize \u2014 one function per task
p738
sa(dp739
S'lang'
p740
VJavaScript
p741
sS'body'
p742
(I0
S'It hurts performance to include the same JavaScript file twice in one\npage. This isn\'t as unusual as you might think. A review of the ten\ntop U.S. web sites shows that two of them contain a duplicated script.\nTwo main factors increase the odds of a script being duplicated in a\nsingle web page: team size and number of scripts. When it does happen,\nduplicate scripts hurt performance by creating unnecessary HTTP\nrequests and wasted JavaScript execution.\n\nUnnecessary HTTP requests happen in Internet Explorer, but not in\nFirefox. In Internet Explorer, if an external script is included twice\nand is not cacheable, it generates two HTTP requests during page\nloading. Even if the script is cacheable, extra HTTP requests occur\nwhen the user reloads the page.\n\nIn addition to generating wasteful HTTP requests, time is wasted\nevaluating the script multiple times. This redundant JavaScript\nexecution happens in both Firefox and Internet Explorer, regardless of\nwhether the script is cacheable. One way to avoid accidentally\nincluding the same script twice is to implement a script management\nmodule in your templating system. The typical way to include a script\nis to use the SCRIPT tag in your HTML page.\n\n      <script type="text/javascript" src="menu_1.0.17.js"></script>\n\nAn alternative in PHP would be to create a function called\ninsertScript.\n\n      <?php insertScript("menu.js") ?>\n\nIn addition to preventing the same script from being inserted multiple\ntimes, this function could handle other issues with scripts, such as\ndependency checking and adding version numbers to script filenames to\nsupport far future Expires headers.\n\n[source\nyahoo.com](http://developer.yahoo.com/performance/rules.html#js_dupes)\n'
p743
tp744
sS'votes'
p745
V0
p746
sS'title'
p747
VRemove Duplicate Scripts
p748
sa(dp749
S'lang'
p750
VJavaScript
p751
sS'body'
p752
(I0
S"The problem caused by scripts is that they block parallel downloads.\nThe [HTTP/1.1\nspecification](http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.1.4)\nsuggests that browsers download no more than two components in\nparallel per hostname. If you serve your images from multiple\nhostnames, you can get more than two downloads to occur in parallel.\nWhile a script is downloading, however, the browser won't start any\nother downloads, even on different hostnames.\n\nIn some situations it's not easy to move scripts to the bottom. If,\nfor example, the script uses `document.write` to insert part of the\npage's content, it can't be moved lower in the page. There might also\nbe scoping issues. In many cases, there are ways to workaround these\nsituations.\n\nAn alternative suggestion that often comes up is to use deferred\nscripts. The **DEFER** attribute indicates that the script does not\ncontain `document.write`, and is a clue to browsers that they can\ncontinue rendering. Unfortunately, Firefox doesn't support the DEFER\nattribute. In Internet Explorer, the script may be deferred, but not\nas much as desired. If a script can be deferred, it can also be moved\nto the bottom of the page. That will make your web pages load faster.\n\n[source\nyahoo.com](http://developer.yahoo.com/performance/rules.html#js_bottom)\n"
p753
tp754
sS'votes'
p755
V0
p756
sS'title'
p757
VPut Scripts at the Bottom
p758
sa(dp759
S'lang'
p760
VJavaScript
p761
sS'body'
p762
(I0
S'*   Blank lines separate one block of logically related code from\n    another.\n*   One space on both sides of binary operators and assignment\n    operators.\n*   Keywords followed by a "(" (left parenthesis) must be separated by\n    one space. This gives visual distinction between keywords and\n    function invocations.\n*   There should be no space between the function name and left\n    parenthesis of the argument list.\n*   When a function has parameters, there should be a space on the\n    inside side of both parentheses, for both function definitions and\n    function calls.\n*   Don\'t use operators as if they are functions (such as `delete`,\n    `void`, `typeof`, `new`, `return`, ...).\n\nWhitespace examples\n\n**Yes**\n\n    a.foo = bar + baz;\n\n    if ( foo ) {\n        foo.bar = doBar();\n    }\n\n    function foo() {\n        return bar;\n    }\n\n    foo = function () {\n        return \'bar\';\n    };\n\n    foo = typeof bar;\n\n    function baz( foo, bar ) {\n        return \'gaz\';\n    }\n\n    baz( \'banana\', \'pear\' );\n\n**No**\n\n    a.foo=bar+baz;\n\n    if( foo ){\n        foo.bar = doBar () ;\n    }\n\n    function foo () {\n        return bar;\n    };\n\n    foo = function() {\n        return(\'bar\');\n    };\n\n    foo = typeof( bar );\n\n    function baz(foo, bar) {\n        return \'gaz\';\n    }\n\n    baz(\'banana\', \'pear\');\n'
p763
tp764
sS'votes'
p765
V0
p766
sS'title'
p767
VWhitespaces
p768
sasVC++
p769
(lp770
(dp771
S'lang'
p772
VC++
p773
sS'body'
p774
(I0
S'Always use braces for `if`, `for` and `while` constructs to prevent\nconfusion or unexpected behavior at the time or writing or in the\nfuture.\n\n    if (someConditional) {\n      // one or more lines\n    }\n\n    for (int i = 0; i < 10; ++i) {\n      // one or more lines\n    }\n\n    while (condition) {\n      // one or more lines\n    }\n\nThe reasoning is that it will prevent issues when you write things\nlike:\n\n    if (a)\n      if (b)\n        doSomething();\n    else {\n      // multiple things to do\n    }\n\nIf braces are always used, ambiguities into the purpose of these\nstatements are avoided altogether and braces will not need to be added\nlater (and therefore cannot be accidentally forgotten).\n'
p775
tp776
sS'votes'
p777
V+7
p778
sS'title'
p779
VAlways use braces for if, for and while
p780
sa(dp781
S'lang'
p782
VC++
p783
sS'body'
p784
(I0
S'Use C++ casts like `static_cast<>()`. Do not use other cast formats\nlike int `y = (int)x;` or `int y = int(x);`.\n\nDefinition: C++ introduced a different cast system from C that\ndistinguishes the types of cast operations.\n\nPros: The problem with C casts is the ambiguity of the operation;\nsometimes you are doing a conversion (e.g., `(int)3.5`) and sometimes\nyou are doing a cast (e.g., `(int)"hello"`); C++ casts avoid this.\nAdditionally C++ casts are more visible when searching for them.\n\nCons: The syntax is nasty.\n\nDecision:\n\n**Do not use C-style casts. Instead, use these C++-style casts.**\n\n*   Use `static_cast` as the equivalent of a C-style cast that does\n    value conversion, or when you need to explicitly up-cast a pointer\n    from a class to its superclass.\n*   Use `const_cast` to remove the `const` qualifier.\n*   Use `reinterpret_cast` to do unsafe conversions of pointer types\n    to and from integer and other pointer types. Use this only if you\n    know what you are doing and you understand the aliasing issues.\n'
p785
tp786
sS'votes'
p787
V+5
p788
sS'title'
p789
VCasting
p790
sa(dp791
S'lang'
p792
VC++
p793
sS'body'
p794
(I0
S'Avoid the `if...if...else` trap. The code\n\n    if (...) \n        if (...) ...; \n    else \n    { \n        ...;    \n        ...; \n    }\n\nwill not do what the indentation level suggests, and it can take hours\nto find such a bug. Always use an extra pair of {...} when dealing\nwith `if...if...else`:\n\n    if (...) \n    { \n       if (...) ...;    \n       else (...) ...; \n    }  /* {...} not necessary, but they keep you out of trouble */  \n\n    if (...) \n    { \n       if (...) ...; \n    }  /* {...} are necessary */ \n    else ...;\n'
p795
tp796
sS'votes'
p797
V+3
p798
sS'title'
p799
VThe if Statement
p800
sa(dp801
S'lang'
p802
VC++
p803
sS'body'
p804
(I0
S"Replace\n\n    for( auto itr = container.begin(); itr != container.end; itr++)\n    {\n        // do stuff for each itr\n        // e.g. itr->count ++;\n    }\n\nwith\n\n    for( auto &itr : container)\n    {\n        // do stuff for each itr\n        // e.g. itr.count++;\n    }\n\nThe '&' allows you to change the value of itr. Both structures allow\nyou to easily swap containers as long as they provide the iterator\ninterface, but the second is a little nicer syntax and more naturally\nimplies that you won't be able to switch to a different iterator\nduring the for.\n"
p805
tp806
sS'votes'
p807
V+3
p808
sS'title'
p809
VUse Ranged for-loops for STL foreach
p810
sa(dp811
S'lang'
p812
VC++
p813
sS'body'
p814
(I0
S"There are two key downsides to using global variables:\n\n**1. They can be changed everywhere.**\n\nYou generally want to enlist the compiler's aid in finding bugs and\nerrors for you. If you allow yourself to modify a variable from all\nover your code, it is very hard for your compiler and yourself to\ntrack down an error. Consider the following scenario:\n\n    Input input; // global\n\n    void foo()\n    {\n        Input inputt;\n        input = someThingWeird;\n    }\n\nThis code will compile. If you're really unlucky, it will even work\nfor a while. If you don't have a global, the code won't compile and\nthe bug will be easy to find.\n\n**2. They increase coupling (and reduce testability).**\n\nBy reading from a global variable, your entity (i.e. function, class,\nwhatever) _depends_ on that global variable. If some day you want to\nuse something else, you'll have to do a lot of refactoring. What's\nmore important, if you change an aspect of the global variable, you\nwill need to update _all parts of the code that uses it_. This is a\ngreat opportunity for suble bugs to infiltrate your code and make your\nlife miserable. A typical example is that **you modify one part of\nyour code, and a completely different part will break**.\n\nUsing globals also makes your code hard to unit test, because it\ndepends on the global variable.\n\n[source\n(codereview.stackexchange.com)](http://codereview.stackexchange.com/a/29133)\n"
p815
tp816
sS'votes'
p817
V+1
p818
sS'title'
p819
VDon't use global variables
p820
sa(dp821
S'lang'
p822
VC++
p823
sS'body'
p824
(I0
S'In C++ you can create objects without the new keyword\n\n    Object obj = new Object();\n\nvs\n\n    Object obj();\n\nThe second one will get destructed when the scope ends, while the\nfirst must be explicitly deleted to prevent a memory leak.\n'
p825
tp826
sS'votes'
p827
V+1
p828
sS'title'
p829
VUse Local Scoping to avoid memory management problems
p830
sa(dp831
S'lang'
p832
VC++
p833
sS'body'
p834
(I0
S"In C++, do not use `#define` to define constants:\n\n    #define CLOCK_RADIUS 5 /* Don't */\n\nUse `const` instead:\n\n    const double CLOCK_RADIUS = 5; /* the radius of the clock face */\n\nYou may not use magic numbers in your code. (A magic number is an\ninteger constant embedded in code without a constant definition.) Any\nnumber except 0, 1, or 2 is considered magic:\n\n    if (p.get_x() < 10) /* Don't */\n\nUse a const variable instead:\n\n    const double WINDOW_XMAX = 10; \n    if (p.get_x() < WINDOW_XMAX) /* OK */\n\nEven the most reasonable cosmic constant is going to change one day.\nYou think there are 365 days per year? Your customers on Mars are\ngoing to be pretty unhappy about your silly prejudice. Make a constant\n\n    const int DAYS_PER_YEAR = 365;\n\nso that you can easily cut a Martian version without trying to find\nall the 365's, 364's, 366's, 367's, and so on in your code.\n\n[source (horstmann.com))](http://horstmann.com/bigcpp/styleguide.html)\n"
p835
tp836
sS'votes'
p837
V+1
p838
sS'title'
p839
VConstants
p840
sa(dp841
S'lang'
p842
VC++
p843
sS'body'
p844
(I0
S'Use the C++ keyword `explicit` for constructors with one argument.\n\nDefinition: Normally, if a constructor takes one argument, it can be\nused as a conversion. For instance, if you define `Foo::Foo(string\nname)` and then pass a string to a function that expects a `Foo`, the\nconstructor will be called to convert the string into a `Foo` and will\npass the Foo to your function for you. This can be convenient but is\nalso a source of trouble when things get converted and new objects\ncreated without you meaning them to. Declaring a constructor\n`explicit` prevents it from being invoked implicitly as a conversion.\n\nPros: Avoids undesirable conversions.\n\nCons: None.\n\nDecision:\n\nWe require all single argument constructors to be explicit. Always put\nexplicit in front of one-argument constructors in the class\ndefinition: explicit `Foo(string name);`\n\nThe exception is copy constructors, which, in the rare cases when we\nallow them, should probably not be `explicit`. Classes that are\nintended to be transparent wrappers around other classes are also\nexceptions. Such exceptions should be clearly marked with comments.\n\nFinally, constructors that take only an initializer\\_list may be\nnon-explicit. This is to permit construction of your type using the\nassigment form for brace init lists (i.e. `MyType m = {1, 2}` ).\n'
p845
tp846
sS'votes'
p847
V+1
p848
sS'title'
p849
VExplicit Constructors
p850
sa(dp851
S'lang'
p852
VC++
p853
sS'body'
p854
(I0
S'C programmers that turn to C++ often use the `class` construct far\nmore often than necessary, when a simple `struct` with public members\nwould suffice.\n\nThe only difference between `class` and `struct` is that the first one\nmakes all members _private_ by default, while the second one makes all\nmembers _public_ by default. Both behaviours can be overridden using\nthe keywords `private`, `protected`, and `public`, so the following\nexample:\n\n    class X {\n        int a;\n    public:\n        char b;\n    private:\n        long c;\n    };\n\nis equivalent to the following:\n\n    struct X {\n    private:\n        int a;\n    public:\n        char b;\n    private:\n        long c;\n    };\n\nThe usage of private and protected members is extremely useful when\nthe classes are more than minimal, and/or they are part of a complex\nOO hierarchy. But there are cases where having private members is\nclearly an overkill, because of the annoyance of having to declare\nsetter/getter methods and of the difficulty in testing the code.\n\nConsider the following code:\n\n    class Point {\n        float x, y;\n\n    public:\n        Point(float a_x, a_y) : x(a_x), y(a_y) {}\n\n        void set(float a_x, a_y) {\n            x = a_x;\n            y = a_y;\n        }\n\n        float get_x() const { return x; }\n        float get_y() const { return y; }\n    };\n\nEverything that you can do with this class can be done with the\nfollowing `struct`:\n\n    struct Point {\n        float x, y;\n\n        Point(float a_x, a_y) : x(a_x), y(a_y) {}\n    };\n\nThere is no additional safety in using the `class` definition of\n`Point`. On the contrary, the implementation is longer, redundant and\nmore error-prone. The only benefit of the `class` definition is that\nif you want you can switch to an internal representation of the point\nin polar coordinates without changing the interface:\n\n    #include <cmath>\n\n    class Point {\n        float r, theta;\n\n    public:\n        Point(float a_x, a_y) {\n            set(a_x, a_y);\n        }\n\n        void set(float a_x, a_y) {\n            r = std::sqrt(a_x * a_x + a_y * a_y);\n            theta = std::atan2(a_y, a_x);\n        }\n\n        float get_x() const { return r * std::cos(theta); }\n        float get_y() const { return r * std::sin(theta); }\n    };\n\nHowever, such modifications are usually necessary only with moderately\nsized classes, not for very simple structures like `Point`.\n'
p855
tp856
sS'votes'
p857
V+1
p858
sS'title'
p859
VPrivate members in classes (and the `struct` keyword)
p860
sa(dp861
S'lang'
p862
VC++
p863
sS'body'
p864
(I0
S'Use for loops only when a variable runs from somewhere to somewhere\nelse with some constant increment/decrement.\n\n    for (i = 0; i < a.size(); i++) \n       print(a[i]);\n\nDo not use the for loop for weird constructs such as\n\n    for (xnew = a / 2; count < ITERATIONS; cout << xnew) /* Don\'t */ \n    { \n       xold = xnew;    \n       xnew = xold + a / xold;    \n       count++; \n    }\n\nMake such a loop into a while loop, so the sequence of instructions is\nmuch clearer.\n\n    xnew = a / 2; \n    while (count < ITERATIONS) /* OK */ \n    { \n       xold = xnew;    \n       xnew = xold + a / xold;    \n       count++;    \n       cout << xnew; \n    }\n\nA for loop traversing a linked list can be neat and intuitive:\n\n    for (p = a.begin(); p != a.end(); p++) \n       cout << *p << "\\n";\n'
p865
tp866
sS'votes'
p867
V0
p868
sS'title'
p869
VThe for Statement
p870
sa(dp871
S'lang'
p872
VC++
p873
sS'body'
p874
(I0
S'Move variables to the innermost block in which they are needed.\n\n    while (...) \n    { \n       double xnew = (xold + a / xold) / 2;    \n       ... \n    }\n'
p875
tp876
sS'votes'
p877
V0
p878
sS'title'
p879
VLocal Variables
p880
sa(dp881
S'lang'
p882
VC++
p883
sS'body'
p884
(I0
S"When defining a pointer variable, place the * with the type, not the\nvariable:\n\n    Link* p; /* OK */\n\nnot\n\n    Link *p; /* Don't */\n"
p885
tp886
sS'votes'
p887
V0
p888
sS'title'
p889
VPointer Variables
p890
sa(dp891
S'lang'
p892
VC++
p893
sS'body'
p894
(I0
S'`using namespace std;` is usually used to save a few keystrokes and\nmake the code more concise.\n\nHowever, this can bite you pretty bad as it can lead to the wrong\nfunction being called if different namespaces use the same identifiers\n(keep in mind that the identifiers in the `std` namespace are pretty\ncommon).\n\nYou can find a more complete explanation on\n[stackoverflow](http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice).\n'
p895
tp896
sS'votes'
p897
V0
p898
sS'title'
p899
VDo not use "using namespace std;"
p900
sa(dp901
S'lang'
p902
VC++
p903
sS'body'
p904
(I0
S'Use delegating and inheriting constructors when they reduce code\nduplication.\n\nDefinition:\n\nDelegating and inheriting constructors are two different features,\nboth introduced in C++11, for reducing code duplication in\nconstructors. Delegating constructors allow one of a class\'s\nconstructors to forward work to one of the class\'s other constructors,\nusing a special variant of the initialization list syntax. For\nexample:\n\n    X::X(const string& name) : name_(name) {\n     ...\n    }\n\n    X::X() : X("") { }\n\nInheriting constructors allow a derived class to have its base class\'s\nconstructors available directly, just as with any of the base class\'s\nother member functions, instead of having to redeclare them. This is\nespecially useful if the base has multiple constructors. For example:\n\n    class Base {\n    public:\n      Base();\n      Base(int n);\n      Base(const string& s);\n      ...\n    };\n\n    class Derived : public Base {\n    public:\n      using Base::Base;  // Base\'s constructors are redeclared here.\n    };\n\nThis is especially useful when `Derived`\'s constructors don\'t have to\ndo anything more than calling `Base`\'s constructors.\n\nPros:\n\nDelegating and inheriting constructors reduce verbosity and\nboilerplate, which can improve readability.\n\nDelegating constructors are familiar to Java programmers.\n\nCons:\n\nIt\'s possible to approximate the behavior of delegating constructors\nby using a helper function.\n\nInheriting constructors may be confusing if a derived class introduces\nnew member variables, since the base class constructor doesn\'t know\nabout them.\n\nDecision:\n\nUse delegating and inheriting constructors when they reduce\nboilerplate and improve readability. Be cautious about inheriting\nconstructors when your derived class has new member variables.\nInheriting constructors may still be appropriate in that case if you\ncan use in-class member initialization for the derived class\'s member\nvariables.\n'
p905
tp906
sS'votes'
p907
V0
p908
sS'title'
p909
VDelegating and inheriting constructors
p910
sa(dp911
S'lang'
p912
VC++
p913
sS'body'
p914
(I0
S"Opening and closing braces should line up, either horizontally or\nvertically.\n\n**Ok**\n\n    while (i < n) { print(a[i]); i++; } /* OK */ \n    while (i < n) \n    { \n       print(a[i]);    \n       i++; \n    } /* OK */\n\nSome programmers don't line up vertical braces but place the `{`\nbehind the while:\n\n**Don't**\n\n    while (i < n) { /* Don't */ \n       print(a[i]);    \n       i++; \n    }\n\nThis style saves a line, but it is difficult to match the braces.\n"
p915
tp916
sS'votes'
p917
V0
p918
sS'title'
p919
VBraces
p920
sa(dp921
S'lang'
p922
VC++
p923
sS'body'
p924
(I0
S"Use a `struct` only for passive objects that carry data; everything\nelse is a class.\n\nThe `struct` and `class` keywords behave almost identically in C++. We\nadd our own semantic meanings to each keyword, so you should use the\nappropriate keyword for the data-type you're defining.\n\n`structs` should be used for passive objects that carry data, and may\nhave associated constants, but lack any functionality other than\naccess/setting the data members. The accessing/setting of fields is\ndone by directly accessing the fields rather than through method\ninvocations. Methods should not provide behavior but should only be\nused to set up the data members, e.g., constructor, destructor,\n`Initialize()`, `Reset()`, `Validate()`.\n\nIf more functionality is required, a `class` is more appropriate. If\nin doubt, make it a `class`.\n\nFor consistency with STL (Standard Template Library), you can use\n`struct` instead of class for functors and traits.\n"
p925
tp926
sS'votes'
p927
V0
p928
sS'title'
p929
VStructs vs Classes
p930
sa(dp931
S'lang'
p932
VC++
p933
sS'body'
p934
(I0
S"Use overloaded functions (including constructors) only if a reader\nlooking at a call site can get a good idea of what is happening\nwithout having to first figure out exactly which overload is being\ncalled.\n\nYou may write a function that takes a `const string&` and overload it\nwith another that takes const `char*`.\n\n    class MyClass {\n     public:\n      void Analyze(const string &text);\n      void Analyze(const char *text, size_t textlen);\n    };\n\nPros: Overloading can make code more intuitive by allowing an\nidentically-named function to take different arguments. It may be\nnecessary for templatized code, and it can be convenient for Visitors.\n\nCons: If a function is overloaded by the argument types alone, a\nreader may have to understand C++'s complex matching rules in order to\ntell what's going on. Also many people are confused by the semantics\nof inheritance if a derived class overrides only some of the variants\nof a function.\n\nDecision: If you want to overload a function, consider qualifying the\nname with some information about the arguments, e.g., AppendString(),\nAppendInt() rather than just Append().\n"
p935
tp936
sS'votes'
p937
V0
p938
sS'title'
p939
VFunction overloading
p940
sa(dp941
S'lang'
p942
VC++
p943
sS'body'
p944
(I0
S'We allow use of `friend` classes and functions, within reason.\n\nFriends should usually be defined in the same file so that the reader\ndoes not have to look in another file to find uses of the private\nmembers of a class. A common use of friend is to have a FooBuilder\nclass be a friend of Foo so that it can construct the inner state of\nFoo correctly, without exposing this state to the world. In some cases\nit may be useful to make a unittest class a friend of the class it\ntests.\n\nFriends extend, but do not break, the encapsulation boundary of a\nclass. In some cases this is better than making a member public when\nyou want to give only one other class access to it. However, most\nclasses should interact with other classes solely through their public\nmembers.\n\n[source\n(google.com))](http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml?showone=Friends#Friends)\n'
p945
tp946
sS'votes'
p947
V0
p948
sS'title'
p949
VFriends
p950
sasVCoffeeScript
p951
(lp952
(dp953
S'lang'
p954
VCoffeeScript
p955
sS'body'
p956
(I0
S"One of the best things about coffeescript is its brevity.  Avoid\nunnecessary syntax by omitting optional parens.\n\n    bar = -> # Yes\n    bar = () -> # No\n\n    # No\n    bar () ->\n       console.log 'inside callback'\n    # Yes\n    bar ->\n       console.log 'Inside callback'\n"
p957
tp958
sS'votes'
p959
V+8
p960
sS'title'
p961
VDo not use parentheses when declaring functions with no arguments
p962
sa(dp963
S'lang'
p964
VCoffeeScript
p965
sS'body'
p966
(I0
S'Curly brackets and semicolons are sexy.\n'
p967
tp968
sS'votes'
p969
V+2
p970
sS'title'
p971
VDo not use CoffeeScript. Write real JavaScript.
p972
sa(dp973
S'lang'
p974
VCoffeeScript
p975
sS'body'
p976
(I0
S"Avoid the use of commas before newlines when properties or elements of\nan Object or Array are listed on separate lines.\n\n    # Yes\n    foo = [\n      'some'\n      'string'\n      'values'\n    ]\n    bar:\n      label: 'test'\n      value: 87\n\n    # No\n    foo = [\n      'some',\n      'string',\n      'values'\n    ]\n    bar:\n      label: 'test',\n      value: 87\n\n**Explanation**\n\nObject literals can be specified exactly as in JavaScript, with a pair\nof braces and key/value statements. However, like with function\ninvocation, CoffeeScript makes the braces optional. In fact, you can\nalso use indentation and new lines instead of comma separation.\n"
p977
tp978
sS'votes'
p979
V+1
p980
sS'title'
p981
VOptional Commas
p982
sa(dp983
S'lang'
p984
VCoffeeScript
p985
sS'body'
p986
(I0
S'Aligning the assignments is something that can be done automatically\nby a nice editor and increases the readability of the code.\n\nQuoting from the CoffeeScript website:\n\n    number   = 42\n    opposite = true\n'
p987
tp988
sS'votes'
p989
V-1
p990
sS'title'
p991
VAlign your assignments
p992
sasVRuby
p993
(lp994
(dp995
S'lang'
p996
VRuby
p997
sS'body'
p998
(I0
S'Avoid `return` where not required.\n\n**bad**\n\n    def some_method(some_arr)\n      return some_arr.size\n    end\n\n**good**\n\n    def some_method(some_arr)\n      some_arr.size\n    end\n\n_[Rubocop](http://batsov.com/rubocop/) name: `RedundantReturn`_\n'
p999
tp1000
sS'votes'
p1001
V+8
p1002
sS'title'
p1003
VAvoid return where not required
p1004
sa(dp1005
S'lang'
p1006
VRuby
p1007
sS'body'
p1008
(I0
S'**bad**\n\n    result = hash.map { |k, v| v + 1 }\n\n**good**\n\n    result = hash.map { |_, v| v + 1 }\n'
p1009
tp1010
sS'votes'
p1011
V+5
p1012
sS'title'
p1013
VUse _ for unused block parameters
p1014
sa(dp1015
S'lang'
p1016
VRuby
p1017
sS'body'
p1018
(I0
S"Most of the time iterators should be used instead. for is implemented\nin terms of each (so you're adding a level of indirection), but with a\ntwist - for doesn't introduce a new scope (unlike each) and variables\ndefined in its block will be visible outside it.\n\n    arr = [1, 2, 3]\n\n    # bad\n    for elem in arr do\n      puts elem\n    end\n\n    # good\n    arr.each { |elem| puts elem }\n\n[source (github.com)](https://github.com/styleguide/ruby)\n\n_[Rubocop](http://batsov.com/rubocop/) name: `For`_\n"
p1019
tp1020
sS'votes'
p1021
V+5
p1022
sS'title'
p1023
VNever use for, unless you know exactly why
p1024
sa(dp1025
S'lang'
p1026
VRuby
p1027
sS'body'
p1028
(I0
S"Don't use `||=` to initialize boolean variables. (Consider what would\nhappen if the current value happened to be false.)\n\n**bad** - would set enabled to true even if it was false\n\n    enabled ||= true\n\n**good**\n\n    enabled = true if enabled.nil?\n"
p1029
tp1030
sS'votes'
p1031
V+4
p1032
sS'title'
p1033
VDon't use ||= to initialize boolean variables
p1034
sa(dp1035
S'lang'
p1036
VRuby
p1037
sS'body'
p1038
(I0
S'**bad**\n\n    def some_method(arg1=:default, arg2=nil, arg3=[])\n      # do something...\n    end\n\n**good**\n\n    def some_method(arg1 = :default, arg2 = nil, arg3 = [])\n      # do something...\n    end\n\nWhile several Ruby books suggest the first style, the second is much\nmore prominent in practice (and arguably a bit more readable).\n\n_[Rubocop](http://batsov.com/rubocop/) name:\n`SpaceAroundEqualsInParameterDefault`_\n'
p1039
tp1040
sS'votes'
p1041
V+3
p1042
sS'title'
p1043
VUse spaces around the = operator when assigning default values to method parameters
p1044
sa(dp1045
S'lang'
p1046
VRuby
p1047
sS'body'
p1048
(I0
S'Always use two spaces when indenting Ruby code. (Credits to Russ Olsen\nfrom Eloquent Ruby.)\n\n    def awesome_method\n        if @name ~= /pikachu/\n            puts "Awesome!"\n        end\n    end\n\nIt looks kind of odd right? How about...\n\n    def awesome_method\n      if @name ~= /pikachu/\n        puts "Awesome!"\n      end\n    end\n\nThat\'s more like it :)\n'
p1049
tp1050
sS'votes'
p1051
V+3
p1052
sS'title'
p1053
VAlways use two spaces for indentation
p1054
sa(dp1055
S'lang'
p1056
VRuby
p1057
sS'body'
p1058
(I0
S'The assignment operator `=` looks a lot like the equality operator\n`==`. Using `=` to assign to a variable within a conditional\nexpression, while clever and syntactically correct, creates confusion\nfor anyone debugging the code. Was the assignment intentional, or did\nthe author mean to check for equality instead?\n\n**Bad:**\n\n    if x = some_method(y)\n      # Do something with x here...\n    end\n\n**Better:**\n\n    x = some_method(y)\n    if x\n      # Do something with x here...\n    end\n\n_[Rubocop](http://batsov.com/rubocop/) name: `AssignmentInCondition`_\n'
p1059
tp1060
sS'votes'
p1061
V+2
p1062
sS'title'
p1063
VAvoid assignments in conditional expressions
p1064
sa(dp1065
S'lang'
p1066
VRuby
p1067
sS'body'
p1068
(I0
S'parentheses make the code easier to follow. General Ruby style is to\nuse them, except in the following cases:\n\n*   Always leave out empty parentheses The parentheses can be left out\n    of a single command that is surrounded by ERb delimiters \xe2\x80\x94 the\n    ERb markers make sure the code is still readable\n*   A line that is a single command and a single simple argument can\n    be written without the parentheses. Personally, I find that I do\n    this less and less, but it\xe2\x80\x99s still perfectly readable. I tend\n    not to like single lines in regular ruby code that have multiple\n    arguments and no parentheses.\n*   A lot of Ruby-based Domain Specific Languages (such as Rake)\n    don\xe2\x80\x99t use parentheses to preserve a more natural language feel\n    to their statements.\n\n[source\n(pathfindersoftware.com)](http://pathfindersoftware.com/2008/10/elements-of-ruby-style/)\n\n_[Rubocop](http://batsov.com/rubocop/) names: `RequireParentheses`,\n`DefWithParentheses`, `MethodCallParentheses`, `MethodDefParentheses`,\n`ParenthesesAroundCondition`_\n'
p1069
tp1070
sS'votes'
p1071
V+2
p1072
sS'title'
p1073
VRuby allows you to leave out parentheses, in general, resist this temptation.
p1074
sa(dp1075
S'lang'
p1076
VRuby
p1077
sS'body'
p1078
(I0
S"Use `def` with parentheses when there are arguments. Omit the\nparentheses when the method doesn't accept any arguments.\n\n    def some_method\n      # body omitted\n    end\n\n    def some_method_with_arguments(arg1, arg2)\n      # body omitted\n    end\n\n[source (github.com)](https://github.com/styleguide/ruby)\n\n_[Rubocop](http://batsov.com/rubocop/) name: `DefWithParentheses`_\n"
p1079
tp1080
sS'votes'
p1081
V+2
p1082
sS'title'
p1083
VUse def with parentheses when there are arguments
p1084
sa(dp1085
S'lang'
p1086
VRuby
p1087
sS'body'
p1088
(I0
S'However, do use the ternary operator(?:) over if/then/else/end\nconstructs for single line conditionals.\n\n**bad**\n\n    result = if some_condition then something else something_else end\n\n**good**\n\n    result = some_condition ? something : something_else\n\n_[Rubocop](http://batsov.com/rubocop/) names:\n`MultilineTernaryOperator`, `OneLineConditional`_\n'
p1089
tp1090
sS'votes'
p1091
V+1
p1092
sS'title'
p1093
VAvoid the ternary operator (?:) except in cases where all expressions are extremely trivial
p1094
sa(dp1095
S'lang'
p1096
VRuby
p1097
sS'body'
p1098
(I0
S'**Example:**\n\n    # bad - how many 0s are there?\n    num = 1000000\n\n    # good - much easier to parse for the human brain\n    num = 1_000_000\n\n**Explanation**\n\nRuby allows the underscore to be used in numeric literals to increase\nreadability of large numbers. The underscore is simply ignored when\nthe number is parsed. Here is an example using floating point:\n\n    1_322.34\n    1_32234e-2\n    132.234E1\n\nThese numbers have the same value, 1,322.34. You may use underscores\nin floating point numbers as well.\n\n_[Rubocop](http://batsov.com/rubocop/) name: `NumericLiterals`_\n'
p1099
tp1100
sS'votes'
p1101
V+1
p1102
sS'title'
p1103
VAdd underscores to large numeric literals to improve their readability
p1104
sa(dp1105
S'lang'
p1106
VRuby
p1107
sS'body'
p1108
(I0
S'**bad**\n\n    if some_condition then\n      # body omitted\n    end\n\n**good**\n\n    if some_condition\n      # body omitted\n    end\n\n_[Rubocop](http://batsov.com/rubocop/) name: `MultilineIfThen`_\n'
p1109
tp1110
sS'votes'
p1111
V+1
p1112
sS'title'
p1113
VNever use then for multi-line if/unless
p1114
sa(dp1115
S'lang'
p1116
VRuby
p1117
sS'body'
p1118
(I0
S'Use one expression per branch in a ternary operator. This also means\nthat ternary operators must not be nested. Prefer `if`/`else`\nconstructs in these cases.\n\n**bad**\n\n     some_condition ? (nested_condition ? nested_something : nested_something_else) : something_else\n\n**good**\n\n     if some_condition\n       nested_condition ? nested_something : nested_something_else\n     else\n       something_else\n     end\n\n_[Rubocop](http://batsov.com/rubocop/) name: `NestedTernaryOperator`_\n'
p1119
tp1120
sS'votes'
p1121
V0
p1122
sS'title'
p1123
VUse one expression per branch in a ternary operator
p1124
sa(dp1125
S'lang'
p1126
VRuby
p1127
sS'body'
p1128
(I0
S"The `and` and `or` keywords are banned. It's just not worth it. Always\nuse `&&` and `||` instead.\n\n_[Rubocop](http://batsov.com/rubocop/) name: `AndOr`_\n"
p1129
tp1130
sS'votes'
p1131
V0
p1132
sS'title'
p1133
VThe and and or keywords are banned
p1134
sa(dp1135
S'lang'
p1136
VRuby
p1137
sS'body'
p1138
(I0
S'Guard statements help to tidy up nasty conditional logic. A guard\nstatement is a short command followed by `if` or `unless` and then an\nexpression that produces a truthy value. Good for when both the\ncommand and the conditional can be expressed as single method calls\nwith a minimum of fuss.\n\n## bad ##\n\n    if missing_wheels?\n      attach_wheels\n    end\n\n## good ##\n\n    attach_wheels if missing_wheels?\n'
p1139
tp1140
sS'votes'
p1141
V0
p1142
sS'title'
p1143
VGuard clauses
p1144
sa(dp1145
S'lang'
p1146
VRuby
p1147
sS'body'
p1148
(I0
S'The maximum length of any line of your code should be 80 characters\n(some would even say 79). The only exceptions should be complex\nregular expressions and other constructs that are difficult to break\nover multiple lines.\n\nMake use of Ruby\'s implied line continuation. Basically, if Ruby can\ndetermine that a statement is syntactically incomplete, it will expect\nit to be continued on the next line:\n\n    puts "This line appears to end"\n      if foo == bar\n\nThe above example confuses Ruby, since the first line is a valid\nstatement in its own right. If, however, the if modifier were moved to\nthe end of the first line, Ruby could then determine that there must\nbe more code to come. Basically, the rule of thumb is that you should\ntry to break a line after a comma or an operator.\n\nIf you can\'t imply that a line continues by using syntactically\nincomplete statements, terminate the line with a backslash, as you\nwould if you were writing a shell script. Ruby will then continue\nparsing on the next line.\n\n_[Rubocop](http://batsov.com/rubocop/) names: `IfUnlessModifier`,\n`LineLength`, `WhileUntilModifier`_\n'
p1149
tp1150
sS'votes'
p1151
V0
p1152
sS'title'
p1153
VLine length
p1154
sa(dp1155
S'lang'
p1156
VRuby
p1157
sS'body'
p1158
(I0
S'Ruby considers **nil** and **false** to be false, and all other values\nto be **true**. This is one of the major obvious differences from\nPerl, with which Ruby shares many superficial similarities. In Perl,\n**0**, the null string and **undef** are all considered false for the\npurposes of Boolean logic. In Ruby, however, **0** and the null string\nboth evaluate to true. Ruby also has the Boolean values of **true**\nand **false**, unlike Perl.\n\nIf you\'re coming from a Perl background, the important thing to\nremember is that you will need more explicit tests for empty strings\nand zero values than you are used to, such as:\n\n    if foo.empty?\n      ...\n    end\n\n    if foo.zero?\n      ...\n    end\n\nThese can be rewritten in more Perl-like syntax, if that better suits\nyour taste.\n\n    if foo == ""\n      ...\n    end\n\n\n    if foo == 0\n      ...\n    end\n'
p1159
tp1160
sS'votes'
p1161
V0
p1162
sS'title'
p1163
VBoolean values
p1164
sa(dp1165
S'lang'
p1166
VRuby
p1167
sS'body'
p1168
(I0
S"We recommend that you invoke your scripts with the following shebang\nline, plus whichever extra command-line options are appropriate for\nyour needs:\n\n    #!/usr/bin/ruby -w\n\nThis will ensure that you always run the same interpreter _(do not use\nenv(1))_ and that any warnings generated by your code or the libraries\nyou include will be displayed, so that you can decide how to proceed.\n\nIf the warnings get too noisy and you are certain they are not worth\nsilencing by changing your code, you can turn off warnings for a\nsection of your code by setting `$VERBOSE` to **nil**. Even better is\nto codify this in a method:\n\n    def silently(&block)\n      warn_level = $VERBOSE\n      $VERBOSE = nil\n      result = block.call\n      $VERBOSE = warn_level\n      result\n    end\n\nSince this method takes a block as its parameter, you can now pass it\narbitrary chunks of code to execute without warnings:\n\n    silently { require 'net/https' }\n\n[source\n(caliban.org)](http://www.caliban.org/ruby/rubyguide.shtml#warnings)\n"
p1169
tp1170
sS'votes'
p1171
V0
p1172
sS'title'
p1173
VWarnings
p1174
sa(dp1175
S'lang'
p1176
VRuby
p1177
sS'body'
p1178
(I0
S'Prefer `{...}` over do...end for single-line blocks. Avoid using\n`{...}` for multi-line blocks (multiline chaining is always ugly).\nAlways use `do...end` for "control flow" and "method definitions"\n(e.g. in Rakefiles and certain DSLs). Avoid `do...end` when chaining.\n\nFor example:\n\n    names = ["Bozhidar", "Steve", "Sarah"]\n\n**good**\n\n    names.each { |name| puts name }\n\n**bad**\n\n    names.each do |name|\n      puts name\n    end\n\n**good**\n\n    names.select { |name| name.start_with?("S") }.map { |name| name.upcase }\n\n**bad**\n\n    names.select do |name|\n      name.start_with?("S")\n    end.map { |name| name.upcase }\n\n_[Rubocop](http://batsov.com/rubocop/) name: `Blocks`_\n'
p1179
tp1180
sS'votes'
p1181
V0
p1182
sS'title'
p1183
VPrefer {...} over do...end for single-line blocks
p1184
sa(dp1185
S'lang'
p1186
VRuby
p1187
sS'body'
p1188
(I0
S"Order your code as follows:\n\n*   header block with author's name, Perforce Id tag and a brief\n    description of what the program or library is for.\n*   `require` statements\n*   `include` statements\n*   class and module definitions\n*   main program section\n*   testing code\n\nTesting code would look something like this:\n\n    if __FILE__ == $0\n      ...\n    end\n\nThat should look familiar to you if you have done any Python\nprogramming.\n\n[source\n(caliban.org)](http://www.caliban.org/ruby/rubyguide.shtml#organisation)\n"
p1189
tp1190
sS'votes'
p1191
V0
p1192
sS'title'
p1193
VCode Organization
p1194
sa(dp1195
S'lang'
p1196
VRuby
p1197
sS'body'
p1198
(I0
S'<https://github.com/bbatsov/ruby-style-guide>\n'
p1199
tp1200
sS'votes'
p1201
V-1
p1202
sS'title'
p1203
VAvoid extraneous style guides (DRY)
p1204
sasVC#
p1205
(lp1206
(dp1207
S'lang'
p1208
VC#
p1209
sS'body'
p1210
(I0
S'Use [implicit\ntyping](http://msdn.microsoft.com/en-us/library/bb384061.aspx) for\nlocal variables when the type of the variable is obvious from the\nright side of the assignment, or when the precise type is not\nimportant.\n\n    // When the type of a variable is clear from the context, use var  \n    // in the declaration. \n    var var1 = "This is clearly a string.";\n    var var2 = 27;\n    var var3 = Convert.ToInt32(Console.ReadLine());\n\nDo not use var when the type is not apparent from the right side of\nthe assignment.\n\n    // When the type of a variable is not clear from the context, use an \n    // explicit type. \n    int var4 = ExampleClass.ResultSoFar();\n\nDo not rely on the variable name to specify the type of the variable.\nIt might not be correct.\n\n    // Naming the following variable inputInt is misleading.  \n    // It is a string. \n    var inputInt = Console.ReadLine();\n    Console.WriteLine(inputInt);\n\nAvoid the use of var in place of dynamic.\n\nUse implicit typing to determine the type of the loop variable in for\nand foreach loops.\n\nThe following example uses implicit typing in a for statement.\n\n    var syllable = "ha";\n    var laugh = "";\n    for (var i = 0; i < 10; i++)\n    {\n        laugh += syllable;\n        Console.WriteLine(laugh);\n    }\n\nThe following example uses implicit typing in a foreach statement.\n\n    foreach (var ch in laugh)\n    {\n        if (ch == \'h\')\n            Console.Write("H");\n        else\n            Console.Write(ch);\n    }\n    Console.WriteLine();\n'
p1211
tp1212
sS'votes'
p1213
V+4
p1214
sS'title'
p1215
VImplicity typed local variables
p1216
sa(dp1217
S'lang'
p1218
VC#
p1219
sS'body'
p1220
(I0
S'When an expression will not fit on a single line, break it up\naccording to these general principles:\n\n*   Break after a comma.\n*   Break after an operator.\n*   Prefer higher-level breaks to lower-level breaks.\n*   Align the new line with the beginning of the expression at the\n    same level on the previous line\n\nExample of breaking up method calls:\n\n    longMethodCall(expr1, expr2,\n                   expr3, expr4, expr5);\n\nExamples of breaking an arithmetic expression:\n\n**Prefer:**\n\n    var x = a * b / (c - g + f) + \n            4 * z;\n\n**Bad style - avoid:**\n\n    var x = a * b / (c - g +\n            f) + 4 * z;\n\nThe first is preferred, since the break occurs outside the\nparanthesized expression (higher level rule). Note that you indent\nwith tabs to the indentation level and then with spaces to the\nbreaking position in our example this would be:\n\n    > var x = a * b / (c - g + f) +\n    > ........4 * z;\n\nWhere `>` are tab chars and `.` are spaces. (the spaces after the tab\nchar are the indent with of the tab). A good coding practice is to\nmake the tab and space chars visible in the editor which is used.\n\n[source\n(icsharpcode.net)](http://www.icsharpcode.net/technotes/sharpdevelopcodingstyle03.pdf)\n'
p1221
tp1222
sS'votes'
p1223
V+3
p1224
sS'title'
p1225
VIndentation - Wrapping Lines
p1226
sa(dp1227
S'lang'
p1228
VC#
p1229
sS'body'
p1230
(I0
S'The `//` (two slashes) style of comment tags should be used in most\nsituations. Where ever possible, place comments above the code instead\nof beside it.  Here are some examples:\n\n    // This is required for WebClient to work through the proxy\n    GlobalProxySelection.Select = new WebProxy("http://itgproxy");\n\n    // Create object to access Internet resources\n    //\n    WebClient myClient = new WebClient();\n\nComments can be placed at the end of a line when space allows:\n\n    public class SomethingUseful \n    {\n        private int          itemHash;            // instance member\n        private static bool  hasDoneSomething;    // static member\n    }\n\n[source\n(blogs.msdn.com)](http://blogs.msdn.com/b/brada/archive/2005/01/26/361363.aspx)\n'
p1231
tp1232
sS'votes'
p1233
V+2
p1234
sS'title'
p1235
VComment Style
p1236
sa(dp1237
S'lang'
p1238
VC#
p1239
sS'body'
p1240
(I0
S'Having dependencies from a base class to its sub-classes goes against\nproper object-oriented design and might prevent other developers from\nadding new derived classes.\n\n[source\n(csharpguidelines.codeplex.com)](https://csharpguidelines.codeplex.com/releases/view/98254)\n'
p1241
tp1242
sS'votes'
p1243
V+1
p1244
sS'title'
p1245
VDon\u2019t refer to derived classes from the base class
p1246
sa(dp1247
S'lang'
p1248
VC#
p1249
sS'body'
p1250
(I0
S'Don\xe2\x80\x99t use literal values, either numeric or strings, in your code\nother than to define symbolic constants. For example:\n\n    public class Whatever\n    {\n        public static readonly Color PapayaWhip = new Color(0xFFEFD5);\n        public const int MaxNumberOfWheels = 18;\n    }\n\nStrings intended for logging or tracing are exempt from this rule.\nLiterals are allowed when their meaning is clear from the context, and\nnot subject to future changes, For example:\n\n    mean = (a + b) / 2; // okay \n    WaitMilliseconds(waitTimeInSeconds * 1000); // clear enough\n\nIf the value of one constant depends on the value of another, do\nattempt to make this explicit in the code.\n\n    public class SomeSpecialContainer \n    {\n        public const int MaxItems = 32;\n        public const int HighWaterMark = 3 * MaxItems / 4; // at 75% \n    }\n\n**Note** An enumeration can often be used for certain types of\nsymbolic constants.\n\n[source\n(csharpguidelines.codeplex.com)](https://csharpguidelines.codeplex.com/releases/view/98254)\n'
p1251
tp1252
sS'votes'
p1253
V+1
p1254
sS'title'
p1255
VDon\u2019t use "magic\u201d numbers
p1256
sa(dp1257
S'lang'
p1258
VC#
p1259
sS'body'
p1260
(I0
S'Only use var as the result of a LINQ query, or if the type is very\nobvious from the same statement and using it would improve\nreadability. So don\'t\n\n    var i = 3;                                 // what type? int? uint? float?\n    var myfoo = MyFactoryMethod.Create("arg"); // Not obvious what base-class or\n                                               // interface to expect. Also difficult\n                                               // to refactor if you can\'t search for\n                                               // the class\n\nInstead, use var like this.\n\n    var q = from order in orders where order.Items > 10 and order.TotalValue > 1000; \n    var repository = new RepositoryFactory.Get<IOrderRepository>();\n    var list = new ReadOnlyCollection<string>();\n\nIn all of three above examples it is clear what type to expect.\n\n[source\n(csharpguidelines.codeplex.com)](https://csharpguidelines.codeplex.com/releases/view/98254)\n'
p1261
tp1262
sS'votes'
p1263
V+1
p1264
sS'title'
p1265
VOnly use var when the type is very obvious
p1266
sa(dp1267
S'lang'
p1268
VC#
p1269
sS'body'
p1270
(I0
S'Open braces should always be at the beginning of the line after the\nstatement that begins the block. Contents of the brace should be\nindented by 4 spaces. For example:\n\n    if (someExpression)\n    {\n       DoSomething();\n    }\n    else\n    {\n       DoSomethingElse();\n    }\n\n`\xe2\x80\x9ccase\xe2\x80\x9d` statements should be indented from the switch statement\nlike this:\n\n    switch (someExpression) {\n\n       case 0:\n          DoSomething();\n          break;\n\n       case 1:\n          DoSomethingElse();\n          break;\n\n       case 2: \n          {\n             int n = 1;\n             DoAnotherThing(n);\n          }\n          break;\n    }\n\nBraces should never be considered optional. Even for single statement\nblocks, you should always use braces. This increases code readability\nand maintainability.\n\n    for (int i=0; i<100; i++) { DoSomething(i); }\n\n[source\n(blogs.msdn.com)](http://blogs.msdn.com/b/brada/archive/2005/01/26/361363.aspx)\n'
p1271
tp1272
sS'votes'
p1273
V+1
p1274
sS'title'
p1275
VBracing
p1276
sa(dp1277
S'lang'
p1278
VC#
p1279
sS'body'
p1280
(I0
S'Use the concise syntax when you initialize arrays on the declaration\nline.\n\n    // Preferred syntax. Note that you cannot use var here instead of string[]. \n    string[] vowels1 = { "a", "e", "i", "o", "u" };\n\n\n    // If you use explicit instantiation, you can use var. \n    var vowels2 = new string[] { "a", "e", "i", "o", "u" };\n\n    // If you specify an array size, you must initialize the elements one at a time. \n    var vowels3 = new string[5];\n    vowels3[0] = "a";\n    vowels3[1] = "e";\n    // And so on.\n\n[source\n(microsoft.com)](http://msdn.microsoft.com/en-us/library/ff926074.aspx)\n'
p1281
tp1282
sS'votes'
p1283
V+1
p1284
sS'title'
p1285
VArrays
p1286
sa(dp1287
S'lang'
p1288
VC#
p1289
sS'body'
p1290
(I0
S'With the exception of extension method containers static classes very\noften lead to badly designed code. They are also very difficult, if\nnot impossible, to test in isolation unless you\xe2\x80\x99re willing to use\nsome very hacky tools.\n\nNote If you really need that static class, mark it as `static` so that\nthe compiler can prevent instance members and instantiating your\nclass. This relieves you of creating an explicit private constructor.\n\n[source\n(csharpguidelines.codeplex.com)](https://csharpguidelines.codeplex.com/releases/view/98254)\n'
p1291
tp1292
sS'votes'
p1293
V0
p1294
sS'title'
p1295
VAvoid Static Classes
p1296
sa(dp1297
S'lang'
p1298
VC#
p1299
sS'body'
p1300
(I0
S'**Right**: `Console.In.Read(myChar, 0, 1);`\n\nWrong: `Console.In.Read(myChar,0,1);`\n\n[source\n(blogs.msdn.com)](http://blogs.msdn.com/b/brada/archive/2005/01/26/361363.aspx)\n'
p1301
tp1302
sS'votes'
p1303
V0
p1304
sS'title'
p1305
VSpacing - Do use a single space after a comma between function arguments.
p1306
sa(dp1307
S'lang'
p1308
VC#
p1309
sS'body'
p1310
(I0
S'**Right**: `CreateFoo(myChar, 0, 1)`\n\nWrong: `CreateFoo( myChar, 0, 1 )`\n\n[source\n(blogs.msdn.com)](http://blogs.msdn.com/b/brada/archive/2005/01/26/361363.aspx)\n'
p1311
tp1312
sS'votes'
p1313
V0
p1314
sS'title'
p1315
VSpacing - Do not use a space after the parenthesis and function arguments
p1316
sa(dp1317
S'lang'
p1318
VC#
p1319
sS'body'
p1320
(I0
S'**Right**: `CreateFoo()`\n\nWrong: `CreateFoo ()`\n\n[source\n(blogs.msdn.com)](http://blogs.msdn.com/b/brada/archive/2005/01/26/361363.aspx)\n'
p1321
tp1322
sS'votes'
p1323
V0
p1324
sS'title'
p1325
VSpacing - Do not use spaces between a function name and parenthesis.
p1326
sa(dp1327
S'lang'
p1328
VC#
p1329
sS'body'
p1330
(I0
S'**Right**: `x = dataArray[index];`\n\nWrong: `x = dataArray[ index ];`\n\n[source\n(blogs.msdn.com)](http://blogs.msdn.com/b/brada/archive/2005/01/26/361363.aspx)\n'
p1331
tp1332
sS'votes'
p1333
V0
p1334
sS'title'
p1335
VSpacing - Do not use spaces inside brackets.
p1336
sa(dp1337
S'lang'
p1338
VC#
p1339
sS'body'
p1340
(I0
S'**Right**: `while (x == y)`\n\nWrong: `while(x==y)`\n\n[source\n(blogs.msdn.com)](http://blogs.msdn.com/b/brada/archive/2005/01/26/361363.aspx)\n'
p1341
tp1342
sS'votes'
p1343
V0
p1344
sS'title'
p1345
VSpacing - Do use a single space before flow control statements
p1346
sa(dp1347
S'lang'
p1348
VC#
p1349
sS'body'
p1350
(I0
S'**Right**: `if (x == y)`\n\nWrong: `if (x==y)`\n\n[source\n(blogs.msdn.com)](http://blogs.msdn.com/b/brada/archive/2005/01/26/361363.aspx)\n'
p1351
tp1352
sS'votes'
p1353
V0
p1354
sS'title'
p1355
VSpacing - Do use a single space before and after comparison operators
p1356
sa(dp1357
S'lang'
p1358
VC#
p1359
sS'body'
p1360
(I0
S'Use the following three conventions for capitalizing identifiers.\n\n**Pascal case**\n\nThe first letter in the identifier and the first letter of each\nsubsequent concatenated word are capitalized. You can use Pascal case\nfor identifiers of three or more characters. For example:\n\n    BackColor\n\n**Camel case**\n\nThe first letter of an identifier is lowercase and the first letter of\neach subsequent concatenated word is capitalized. For example:\n\n    backColor\n\n**Uppercase**\n\nAll letters in the identifier are capitalized. Use this convention\nonly for identifiers that consist of two or fewer letters. For\nexample:\n\n    System.IO\n    System.Web.UI\n\nYou might also have to capitalize identifiers to maintain\ncompatibility with existing, unmanaged symbol schemes, where all\nuppercase characters are often used for enumerations and constant\nvalues. In general, these symbols should not be visible outside of the\nassembly that uses them.\n\nThe following table summarizes the capitalization rules and provides\nexamples for the different types of identifiers.\n\n    --------------------------------------------------------------------------------------------------\n    |       Identifier         |  Case  |                          Example                             |\n    --------------------------------------------------------------------------------------------------\n    | Class                    | Pascal | AppDomain                                                    |\n    --------------------------------------------------------------------------------------------------\n    | Enum type                | Pascal | ErrorLevel                                                   |\n    --------------------------------------------------------------------------------------------------\n    | Enum values              | Pascal | FatalError                                                   |\n    ---------------------------------------------------------------------------------------------------\n    | Event                    | Pascal | ValueChange                                                  |\n    ---------------------------------------------------------------------------------------------------\n    | Exception class          | Pascal | WebException                                                 |\n    |                          |        | Note: Always ends with the suffix Exception.                 |\n    ---------------------------------------------------------------------------------------------------\n    | Read-only Static field   | Pascal | RedValue                                                     |\n    ---------------------------------------------------------------------------------------------------\n    | Interface                | Pascal |\xc2\xa0IDisposable                                                  |\n    |                          |        | Note: Always begins with the prefix I.                       |\n    ---------------------------------------------------------------------------------------------------\n    | Method                   | Pascal | ToString                                                     |\n    ---------------------------------------------------------------------------------------------------\n    | Namespace                | Pascal | System.Drawing                                               |\n    ---------------------------------------------------------------------------------------------------\n    | Parameter                | Camel  |\xc2\xa0typeName                                                     |\n    ---------------------------------------------------------------------------------------------------\n    | Property                 | Pascal | BackColor                                                    | \n    ---------------------------------------------------------------------------------------------------\n    | Protected instance field |        | redValue                                                     |\n    |                          | Camel  | Note: Rarely used.                                           |\n    |                          |        | A property is preferable to using a protected instance field.|\n    ---------------------------------------------------------------------------------------------------\n    | Public instance field    |        |\xc2\xa0RedValue                                                     |\n    |                          | Pascal | Note: Rarely used.                                           |\n    |                          |        | A property is preferable to using a public instance field.   |\n    --------------------------------------------------------------------------------------------------\n\n[source\n(microsoft.com)](http://msdn.microsoft.com/en-us/library/x2dbyw72(v=vs.71).aspx)\n'
p1361
tp1362
sS'votes'
p1363
V0
p1364
sS'title'
p1365
VCapitalization Styles
p1366
sa(dp1367
S'lang'
p1368
VC#
p1369
sS'body'
p1370
(I0
S'_"Prefer composition over inheritance as it is more malleable / easy\nto modify later, but do not use a compose-always approach."_\n\nAdditionally you get more flexibility to change your specifications\nwithout debugging everything than inherited from your object.\n\nhttp://en.wikipedia.org/wiki/Liskov\\_substitution\\_principle\n\nhttp://stackoverflow.com/questions/49002/prefer-composition-over-inheritance\n'
p1371
tp1372
sS'votes'
p1373
V0
p1374
sS'title'
p1375
VPrefer Composition to Inheritance
p1376
sa(dp1377
S'lang'
p1378
VC#
p1379
sS'body'
p1380
(I0
S'To avoid confusion and guarantee cross-language interoperation, follow\nthese rules regarding the use of abbreviations:\n\n*   Do not use abbreviations or contractions as parts of identifier\n    names. For example, use GetWindow instead of GetWin.\n*   Do not use acronyms that are not generally accepted in the\n    computing field.\n*   Where appropriate, use well-known acronyms to replace lengthy\n    phrase names. For example, use UI for User Interface and `OLAP`\n    for On-line Analytical Processing.\n*   When using acronyms, use Pascal case or camel case for acronyms\n    more than two characters long. For example, use HtmlButton or\n    htmlButton. However, you should capitalize acronyms that consist\n    of only two characters, such as System.IO instead of System.Io.\n*   Do not use abbreviations in identifiers or parameter names. If you\n    must use abbreviations, use [camel\n    case](http://www.codingstyleguide.com/guideline/63) for\n    abbreviations that consist of more than two characters, even if\n    this contradicts the standard abbreviation of the word.\n\n[source\n(microsoft.com)](http://msdn.microsoft.com/en-us/library/141e06ef(v=vs.71).aspx)\n'
p1381
tp1382
sS'votes'
p1383
V0
p1384
sS'title'
p1385
VAbbreviations
p1386
sa(dp1387
S'lang'
p1388
VC#
p1389
sS'body'
p1390
(I0
S'Use the concise syntax to create instances of a delegate type.\n\n    // First, in class Program, define the delegate type and a method that   \n    // has a matching signature. \n\n    // Define the type. \n    public delegate void Del(string message);\n\n    // Define a method that has a matching signature. \n    public static void DelMethod(string str)\n    {\n        Console.WriteLine("DelMethod argument: {0}", str);\n    }\n\n    // In the Main method, create an instance of Del. \n\n    // Preferred: Create an instance of Del by using condensed syntax.\n    Del exampleDel2 = DelMethod;\n\n    // The following declaration uses the full syntax.\n    Del exampleDel1 = new Del(DelMethod);\n\n[source\n(microsoft.com)](http://msdn.microsoft.com/en-us/library/ff926074.aspx)\n'
p1391
tp1392
sS'votes'
p1393
V0
p1394
sS'title'
p1395
VDelegates
p1396
sa(dp1397
S'lang'
p1398
VC#
p1399
sS'body'
p1400
(I0
S'To avoid exceptions and increase performance by skipping unnecessary\ncomparisons, use `&&` instead of `&` and `||` instead of `|` when you\nperform comparisons, as shown in the following example.\n\n    Console.Write("Enter a dividend: ");\n    var dividend = Convert.ToInt32(Console.ReadLine());\n\n    Console.Write("Enter a divisor: ");\n    var divisor = Convert.ToInt32(Console.ReadLine());\n\n    // If the divisor is 0, the second clause in the following condition \n    // causes a run-time error. The && operator short circuits when the \n    // first expression is false. That is, it does not evaluate the \n    // second expression. The & operator evaluates both, and causes  \n    // a run-time error when divisor is 0. \n    if ((divisor != 0) && (dividend / divisor > 0))\n    {\n        Console.WriteLine("Quotient: {0}", dividend / divisor);\n    }\n    else\n    {\n        Console.WriteLine("Attempted division by 0 ends up here.");\n    }\n\n[source\n(microsoft.com)](http://msdn.microsoft.com/en-us/library/ff926074.aspx)\n'
p1401
tp1402
sS'votes'
p1403
V0
p1404
sS'title'
p1405
V&& and || Operators
p1406
sa(dp1407
S'lang'
p1408
VC#
p1409
sS'body'
p1410
(I0
S'Use a **try-catch** statement for most exception handling.\n\n    static string GetValueFromArray(string[] array, int index)\n    {\n        try\n        {\n            return array[index];\n        }\n        catch (System.IndexOutOfRangeException ex)\n        {\n            Console.WriteLine("Index is out of range: {0}", index);\n            throw;\n        }\n    }\n\nSimplify your code by using the C# using statement. If you have a\n**try-finally** statement in which the only code in the finally block\nis a call to the Dispose method, use a using statement instead.\n\n    // This try-finally statement only calls Dispose in the finally block.\n    Font font1 = new Font("Arial", 10.0f);\n    try\n    {\n        byte charset = font1.GdiCharSet;\n    }\n    finally\n    {\n        if (font1 != null)\n        {\n            ((IDisposable)font1).Dispose();\n        }\n    }\n\n\n    // You can do the same thing with a using statement. \n    using (Font font2 = new Font("Arial", 10.0f))\n    {\n        byte charset = font2.GdiCharSet;\n    }\n\n[source\n(microsoft.com)](http://msdn.microsoft.com/en-us/library/ff926074.aspx)\n'
p1411
tp1412
sS'votes'
p1413
V0
p1414
sS'title'
p1415
Vtry-catch and using Statements in Exception Handling
p1416
sa(dp1417
S'lang'
p1418
VC#
p1419
sS'body'
p1420
(I0
S'If you are defining an event handler that you do not need to remove\nlater, use a lambda expression.\n\n    public Form2()\n    {\n        // You can use a lambda expression to define an event handler. \n        this.Click += (s, e) =>\n            {\n                MessageBox.Show(\n                    ((MouseEventArgs)e).Location.ToString());\n            };\n    }\n\n    // Using a lambda expression shortens the following traditional definition. \n    public Form1()\n    {\n        this.Click += new EventHandler(Form1_Click);\n    }\n\n    void Form1_Click(object sender, EventArgs e)\n    {\n        MessageBox.Show(((MouseEventArgs)e).Location.ToString());\n    }\n\n[source\n(microsoft.com)](http://msdn.microsoft.com/en-us/library/ff926074.aspx)\n'
p1421
tp1422
sS'votes'
p1423
V0
p1424
sS'title'
p1425
VEvent Handling
p1426
sa(dp1427
S'lang'
p1428
VC#
p1429
sS'body'
p1430
(I0
S'Although a property like `customer.HasNoOrders` make sense, avoid\nusing it in a negative condition like this:\n\n    bool hasOrders = !customer.HasNoOrders;\n\n**Why?**\n\nDouble negatives are more difficult to grasp than simple expressions,\nand people tend to read over the double negative easily.\n'
p1431
tp1432
sS'votes'
p1433
V0
p1434
sS'title'
p1435
VAvoid conditions with double negatives
p1436
sa(dp1437
S'lang'
p1438
VC#
p1439
sS'body'
p1440
(I0
S'When coding classes and interfaces, the following formatting rules\nshould be followed:\n\n*   No space between a method name and the parenthesis "(" starting\n    its parameter list.\n*   The opening brace "{" appears in the next line after the\n    declaration statement.\n*   The closing brace " }" starts a line by itself indented to match\n    its corresponding opening brace.\n\nFor example :\n\n    class MySample : MyClass, IMyInterface\n    {\n        int myInt;\n\n        public MySample(int myInt)\n        {\n            this.myInt = myInt ;\n        }\n        void Inc()\n        {\n            ++myInt;\n        }\n        void EmptyMethod()\n        {\n        }\n    }\n\n[source\n(icsharpcode.net)](http://www.icsharpcode.net/technotes/sharpdevelopcodingstyle03.pdf)\n'
p1441
tp1442
sS'votes'
p1443
V0
p1444
sS'title'
p1445
VClass and Interface Declarations
p1446
sas.